// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: role.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from role.proto</summary>
public static partial class RoleReflection {

  #region Descriptor
  /// <summary>File descriptor for role.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RoleReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgpyb2xlLnByb3RvGgxjb21tb24ucHJvdG8iNgoWc2tpbGxfcWlfaHVvX2tl",
          "X2p1X3RvcxIPCgdjYXJkX2lkGAEgASgNEgsKA3NlcRgCIAEoDSI8ChZza2ls",
          "bF9xaV9odW9fa2VfanVfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIPCgdjYXJk",
          "X2lkGAIgASgNIngKEXNraWxsX2d1aV96aGFfdG9zEhgKEHRhcmdldF9wbGF5",
          "ZXJfaWQYASABKA0SHQoJY2FyZF90eXBlGAIgASgOMgouY2FyZF90eXBlEh0K",
          "CXdhbnRfdHlwZRgDIAEoDjIKLmNhcmRfdHlwZRILCgNzZXEYBCABKA0iXwoR",
          "c2tpbGxfZ3VpX3poYV90b2MSEQoJcGxheWVyX2lkGAEgASgNEhgKEHRhcmdl",
          "dF9wbGF5ZXJfaWQYAiABKA0SHQoJY2FyZF90eXBlGAMgASgOMgouY2FyZF90",
          "eXBlIlEKF3NraWxsX3lpX3lhX2h1YW5feWFfdG9zEhgKEHRhcmdldF9wbGF5",
          "ZXJfaWQYASABKA0SDwoHY2FyZF9pZBgCIAEoDRILCgNzZXEYAyABKA0iWwoX",
          "c2tpbGxfeWlfeWFfaHVhbl95YV90b2MSEQoJcGxheWVyX2lkGAEgASgNEhgK",
          "EHRhcmdldF9wbGF5ZXJfaWQYAiABKA0SEwoEY2FyZBgDIAEoCzIFLmNhcmQi",
          "ZQoXc2tpbGxfeWlfaHVhX2ppZV9tdV90b3MSFgoOZnJvbV9wbGF5ZXJfaWQY",
          "ASABKA0SDwoHY2FyZF9pZBgCIAEoDRIUCgx0b19wbGF5ZXJfaWQYAyABKA0S",
          "CwoDc2VxGAQgASgNIoMBChdza2lsbF95aV9odWFfamllX211X3RvYxIRCglw",
          "bGF5ZXJfaWQYASABKA0SFgoOZnJvbV9wbGF5ZXJfaWQYAiABKA0SDwoHY2Fy",
          "ZF9pZBgDIAEoDRIUCgx0b19wbGF5ZXJfaWQYBCABKA0SFgoOam9pbl9pbnRv",
          "X2hhbmQYBSABKAgiIQoSc2tpbGxfdG91X3RpYW5fdG9zEgsKA3NlcRgBIAEo",
          "DSInChJza2lsbF90b3VfdGlhbl90b2MSEQoJcGxheWVyX2lkGAEgASgNIiYK",
          "EXNraWxsX2h1YW5fcmlfdG9jEhEKCXBsYXllcl9pZBgBIAEoDSJyChFza2ls",
          "bF9qaV9zb25nX3RvcxIZCgpoYW5kX2NhcmRzGAEgAygLMgUuY2FyZBIbCgxt",
          "ZXNzYWdlX2NhcmQYAiABKAsyBS5jYXJkEhgKEHRhcmdldF9wbGF5ZXJfaWQY",
          "AyABKA0SCwoDc2VxGAQgASgNIngKEXNraWxsX2ppX3NvbmdfdG9jEhEKCXBs",
          "YXllcl9pZBgBIAEoDRIZCgpoYW5kX2NhcmRzGAIgAygLMgUuY2FyZBIbCgxt",
          "ZXNzYWdlX2NhcmQYAyABKAsyBS5jYXJkEhgKEHRhcmdldF9wbGF5ZXJfaWQY",
          "BCABKA0iOwobc2tpbGxfbWlhbl9saV9jYW5nX3poZW5fdG9zEg8KB2NhcmRf",
          "aWQYASABKA0SCwoDc2VxGAIgASgNIl8KG3NraWxsX21pYW5fbGlfY2FuZ196",
          "aGVuX3RvYxIRCglwbGF5ZXJfaWQYASABKA0SEwoEY2FyZBgCIAEoCzIFLmNh",
          "cmQSGAoQdGFyZ2V0X3BsYXllcl9pZBgDIAEoDSIyChJza2lsbF9qaW5fc2hl",
          "bl90b3MSDwoHY2FyZF9pZBgBIAEoDRILCgNzZXEYAiABKA0iPAoSc2tpbGxf",
          "amluX3NoZW5fdG9jEhEKCXBsYXllcl9pZBgBIAEoDRITCgRjYXJkGAIgASgL",
          "MgUuY2FyZCJMChJza2lsbF9saWFuX21pbl90b3MSGAoQdGFyZ2V0X3BsYXll",
          "cl9pZBgBIAEoDRIPCgdjYXJkX2lkGAIgASgNEgsKA3NlcRgDIAEoDSJSChJz",
          "a2lsbF9saWFuX21pbl90b2MSEQoJcGxheWVyX2lkGAEgASgNEhgKEHRhcmdl",
          "dF9wbGF5ZXJfaWQYAiABKA0SDwoHY2FyZF9pZBgDIAEoDSIlChBza2lsbF9m",
          "dV9oZWlfdG9jEhEKCXBsYXllcl9pZBgBIAEoDSI1ChVza2lsbF94aW5fc2lf",
          "Y2hhb190b3MSDwoHY2FyZF9pZBgBIAEoDRILCgNzZXEYAiABKA0iKgoVc2tp",
          "bGxfeGluX3NpX2NoYW9fdG9jEhEKCXBsYXllcl9pZBgBIAEoDSIlChBza2ls",
          "bF9zaGlfc2lfdG9jEhEKCXBsYXllcl9pZBgBIAEoDSJTChlza2lsbF93YWl0",
          "X2Zvcl9ydV9ndWlfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIWCg53YWl0aW5n",
          "X3NlY29uZBgCIAEoDRILCgNzZXEYAyABKA0iQAoQc2tpbGxfcnVfZ3VpX3Rv",
          "cxIOCgZlbmFibGUYASABKAgSDwoHY2FyZF9pZBgCIAEoDRILCgNzZXEYAyAB",
          "KA0iRgoQc2tpbGxfcnVfZ3VpX3RvYxIRCglwbGF5ZXJfaWQYASABKA0SDwoH",
          "Y2FyZF9pZBgCIAEoDRIOCgZlbmFibGUYAyABKAgiVwodc2tpbGxfd2FpdF9m",
          "b3Jfemh1YW5famlhb190b2MSEQoJcGxheWVyX2lkGAEgASgNEhYKDndhaXRp",
          "bmdfc2Vjb25kGAIgASgNEgsKA3NlcRgDIAEoDSJOChRza2lsbF96aHVhbl9q",
          "aWFvX3RvcxIPCgdjYXJkX2lkGAEgASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQY",
          "AiABKA0SCwoDc2VxGAMgASgNIlQKFHNraWxsX3podWFuX2ppYW9fdG9jEhEK",
          "CXBsYXllcl9pZBgBIAEoDRIPCgdjYXJkX2lkGAIgASgNEhgKEHRhcmdldF9w",
          "bGF5ZXJfaWQYAyABKA0iJgoRc2tpbGxfbWluZ19lcl90b2MSEQoJcGxheWVy",
          "X2lkGAEgASgNIh8KEHNraWxsX2ppX3poaV90b3MSCwoDc2VxGAEgASgNIiUK",
          "EHNraWxsX2ppX3poaV90b2MSEQoJcGxheWVyX2lkGAEgASgNIsABChxza2ls",
          "bF93YWl0X2Zvcl9jaGVuZ196aGlfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIV",
          "Cg1kaWVfcGxheWVyX2lkGAIgASgNEhQKBWNhcmRzGAMgAygLMgUuY2FyZBIY",
          "CghpZGVudGl0eRgEIAEoDjIGLmNvbG9yEiEKC3NlY3JldF90YXNrGAUgASgO",
          "Mgwuc2VjcmV0X3Rhc2sSFgoOd2FpdGluZ19zZWNvbmQYBiABKA0SCwoDc2Vx",
          "GAcgASgNIjIKE3NraWxsX2NoZW5nX3poaV90b3MSDgoGZW5hYmxlGAEgASgI",
          "EgsKA3NlcRgCIAEoDSJPChNza2lsbF9jaGVuZ196aGlfdG9jEhEKCXBsYXll",
          "cl9pZBgBIAEoDRIVCg1kaWVfcGxheWVyX2lkGAIgASgNEg4KBmVuYWJsZRgD",
          "IAEoCCInChJza2lsbF9qaXVfamlfYV90b2MSEQoJcGxheWVyX2lkGAEgASgN",
          "InAKEnNraWxsX2NoZW5nX2Z1X3RvYxIRCglwbGF5ZXJfaWQYASABKA0SFgoO",
          "ZnJvbV9wbGF5ZXJfaWQYAiABKA0SEwoEY2FyZBgDIAEoCzIFLmNhcmQSGgoS",
          "dW5rbm93bl9jYXJkX2NvdW50GAQgASgNIlgKEnNraWxsX2ppdV9qaV9iX3Rv",
          "YxIRCglwbGF5ZXJfaWQYASABKA0SEwoEY2FyZBgCIAEoCzIFLmNhcmQSGgoS",
          "dW5rbm93bl9jYXJkX2NvdW50GAMgASgNIlMKGXNraWxsX3dhaXRfZm9yX3lp",
          "X3hpbl90b2MSEQoJcGxheWVyX2lkGAEgASgNEhYKDndhaXRpbmdfc2Vjb25k",
          "GAIgASgNEgsKA3NlcRgDIAEoDSJaChBza2lsbF95aV94aW5fdG9zEg4KBmVu",
          "YWJsZRgBIAEoCBIYChB0YXJnZXRfcGxheWVyX2lkGAIgASgNEg8KB2NhcmRf",
          "aWQYAyABKA0SCwoDc2VxGAQgASgNImQKEHNraWxsX3lpX3hpbl90b2MSEQoJ",
          "cGxheWVyX2lkGAEgASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQYAiABKA0SEwoE",
          "Y2FyZBgDIAEoCzIFLmNhcmQSDgoGZW5hYmxlGAQgASgIQhYKFGNvbS5mZW5n",
          "c2hlbmcucHJvdG9zYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::CommonReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_qi_huo_ke_ju_tos), global::skill_qi_huo_ke_ju_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_qi_huo_ke_ju_toc), global::skill_qi_huo_ke_ju_toc.Parser, new[]{ "PlayerId", "CardId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_gui_zha_tos), global::skill_gui_zha_tos.Parser, new[]{ "TargetPlayerId", "CardType", "WantType", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_gui_zha_toc), global::skill_gui_zha_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "CardType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_ya_huan_ya_tos), global::skill_yi_ya_huan_ya_tos.Parser, new[]{ "TargetPlayerId", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_ya_huan_ya_toc), global::skill_yi_ya_huan_ya_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_hua_jie_mu_tos), global::skill_yi_hua_jie_mu_tos.Parser, new[]{ "FromPlayerId", "CardId", "ToPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_hua_jie_mu_toc), global::skill_yi_hua_jie_mu_toc.Parser, new[]{ "PlayerId", "FromPlayerId", "CardId", "ToPlayerId", "JoinIntoHand" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_tou_tian_tos), global::skill_tou_tian_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_tou_tian_toc), global::skill_tou_tian_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_huan_ri_toc), global::skill_huan_ri_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_song_tos), global::skill_ji_song_tos.Parser, new[]{ "HandCards", "MessageCard", "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_song_toc), global::skill_ji_song_toc.Parser, new[]{ "PlayerId", "HandCards", "MessageCard", "TargetPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_mian_li_cang_zhen_tos), global::skill_mian_li_cang_zhen_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_mian_li_cang_zhen_toc), global::skill_mian_li_cang_zhen_toc.Parser, new[]{ "PlayerId", "Card", "TargetPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_shen_tos), global::skill_jin_shen_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jin_shen_toc), global::skill_jin_shen_toc.Parser, new[]{ "PlayerId", "Card" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_lian_min_tos), global::skill_lian_min_tos.Parser, new[]{ "TargetPlayerId", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_lian_min_toc), global::skill_lian_min_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "CardId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_fu_hei_toc), global::skill_fu_hei_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_xin_si_chao_tos), global::skill_xin_si_chao_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_xin_si_chao_toc), global::skill_xin_si_chao_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_shi_si_toc), global::skill_shi_si_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_ru_gui_toc), global::skill_wait_for_ru_gui_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ru_gui_tos), global::skill_ru_gui_tos.Parser, new[]{ "Enable", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ru_gui_toc), global::skill_ru_gui_toc.Parser, new[]{ "PlayerId", "CardId", "Enable" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_zhuan_jiao_toc), global::skill_wait_for_zhuan_jiao_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_zhuan_jiao_tos), global::skill_zhuan_jiao_tos.Parser, new[]{ "CardId", "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_zhuan_jiao_toc), global::skill_zhuan_jiao_toc.Parser, new[]{ "PlayerId", "CardId", "TargetPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ming_er_toc), global::skill_ming_er_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_zhi_tos), global::skill_ji_zhi_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_ji_zhi_toc), global::skill_ji_zhi_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_cheng_zhi_toc), global::skill_wait_for_cheng_zhi_toc.Parser, new[]{ "PlayerId", "DiePlayerId", "Cards", "Identity", "SecretTask", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_cheng_zhi_tos), global::skill_cheng_zhi_tos.Parser, new[]{ "Enable", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_cheng_zhi_toc), global::skill_cheng_zhi_toc.Parser, new[]{ "PlayerId", "DiePlayerId", "Enable" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiu_ji_a_toc), global::skill_jiu_ji_a_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_cheng_fu_toc), global::skill_cheng_fu_toc.Parser, new[]{ "PlayerId", "FromPlayerId", "Card", "UnknownCardCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_jiu_ji_b_toc), global::skill_jiu_ji_b_toc.Parser, new[]{ "PlayerId", "Card", "UnknownCardCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_wait_for_yi_xin_toc), global::skill_wait_for_yi_xin_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_xin_tos), global::skill_yi_xin_tos.Parser, new[]{ "Enable", "TargetPlayerId", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::skill_yi_xin_toc), global::skill_yi_xin_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card", "Enable" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// 毛不拔【奇货可居】：你接收双色情报后，可以从你的情报区选择一张情报加入手牌。
/// </summary>
public sealed partial class skill_qi_huo_ke_ju_tos : pb::IMessage<skill_qi_huo_ke_ju_tos> {
  private static readonly pb::MessageParser<skill_qi_huo_ke_ju_tos> _parser = new pb::MessageParser<skill_qi_huo_ke_ju_tos>(() => new skill_qi_huo_ke_ju_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_qi_huo_ke_ju_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_tos(skill_qi_huo_ke_ju_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_tos Clone() {
    return new skill_qi_huo_ke_ju_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_qi_huo_ke_ju_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_qi_huo_ke_ju_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_qi_huo_ke_ju_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【奇货可居】
/// </summary>
public sealed partial class skill_qi_huo_ke_ju_toc : pb::IMessage<skill_qi_huo_ke_ju_toc> {
  private static readonly pb::MessageParser<skill_qi_huo_ke_ju_toc> _parser = new pb::MessageParser<skill_qi_huo_ke_ju_toc>(() => new skill_qi_huo_ke_ju_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_qi_huo_ke_ju_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_toc(skill_qi_huo_ke_ju_toc other) : this() {
    playerId_ = other.playerId_;
    cardId_ = other.cardId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_qi_huo_ke_ju_toc Clone() {
    return new skill_qi_huo_ke_ju_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_qi_huo_ke_ju_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_qi_huo_ke_ju_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (CardId != other.CardId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_qi_huo_ke_ju_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 肥原龙川【诡诈】：出牌阶段限一次，你可以指定一名角色，然后视为你对其使用了一张【威逼】或【利诱】。
/// </summary>
public sealed partial class skill_gui_zha_tos : pb::IMessage<skill_gui_zha_tos> {
  private static readonly pb::MessageParser<skill_gui_zha_tos> _parser = new pb::MessageParser<skill_gui_zha_tos>(() => new skill_gui_zha_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_gui_zha_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_tos(skill_gui_zha_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    cardType_ = other.cardType_;
    wantType_ = other.wantType_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_tos Clone() {
    return new skill_gui_zha_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_type" field.</summary>
  public const int CardTypeFieldNumber = 2;
  private global::card_type cardType_ = global::card_type.ChengQing;
  /// <summary>
  /// 威逼还是利诱
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card_type CardType {
    get { return cardType_; }
    set {
      cardType_ = value;
    }
  }

  /// <summary>Field number for the "want_type" field.</summary>
  public const int WantTypeFieldNumber = 3;
  private global::card_type wantType_ = global::card_type.ChengQing;
  /// <summary>
  /// 如果是威逼，还需要填威逼的卡牌类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card_type WantType {
    get { return wantType_; }
    set {
      wantType_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_gui_zha_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_gui_zha_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardType != other.CardType) return false;
    if (WantType != other.WantType) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardType != global::card_type.ChengQing) hash ^= CardType.GetHashCode();
    if (WantType != global::card_type.ChengQing) hash ^= WantType.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardType != global::card_type.ChengQing) {
      output.WriteRawTag(16);
      output.WriteEnum((int) CardType);
    }
    if (WantType != global::card_type.ChengQing) {
      output.WriteRawTag(24);
      output.WriteEnum((int) WantType);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardType != global::card_type.ChengQing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardType);
    }
    if (WantType != global::card_type.ChengQing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WantType);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_gui_zha_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardType != global::card_type.ChengQing) {
      CardType = other.CardType;
    }
    if (other.WantType != global::card_type.ChengQing) {
      WantType = other.WantType;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardType = (global::card_type) input.ReadEnum();
          break;
        }
        case 24: {
          WantType = (global::card_type) input.ReadEnum();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【诡诈】
/// </summary>
public sealed partial class skill_gui_zha_toc : pb::IMessage<skill_gui_zha_toc> {
  private static readonly pb::MessageParser<skill_gui_zha_toc> _parser = new pb::MessageParser<skill_gui_zha_toc>(() => new skill_gui_zha_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_gui_zha_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_toc(skill_gui_zha_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cardType_ = other.cardType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_gui_zha_toc Clone() {
    return new skill_gui_zha_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_type" field.</summary>
  public const int CardTypeFieldNumber = 3;
  private global::card_type cardType_ = global::card_type.ChengQing;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card_type CardType {
    get { return cardType_; }
    set {
      cardType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_gui_zha_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_gui_zha_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardType != other.CardType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardType != global::card_type.ChengQing) hash ^= CardType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardType != global::card_type.ChengQing) {
      output.WriteRawTag(24);
      output.WriteEnum((int) CardType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardType != global::card_type.ChengQing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_gui_zha_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardType != global::card_type.ChengQing) {
      CardType = other.CardType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardType = (global::card_type) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 王魁【以牙还牙】：你接收黑色情报后，可以将一张黑色手牌置入情报传出者或其相邻角色的情报区，然后摸一张牌。
/// </summary>
public sealed partial class skill_yi_ya_huan_ya_tos : pb::IMessage<skill_yi_ya_huan_ya_tos> {
  private static readonly pb::MessageParser<skill_yi_ya_huan_ya_tos> _parser = new pb::MessageParser<skill_yi_ya_huan_ya_tos>(() => new skill_yi_ya_huan_ya_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_ya_huan_ya_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_tos(skill_yi_ya_huan_ya_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_tos Clone() {
    return new skill_yi_ya_huan_ya_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_ya_huan_ya_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_ya_huan_ya_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_ya_huan_ya_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【以牙还牙】
/// </summary>
public sealed partial class skill_yi_ya_huan_ya_toc : pb::IMessage<skill_yi_ya_huan_ya_toc> {
  private static readonly pb::MessageParser<skill_yi_ya_huan_ya_toc> _parser = new pb::MessageParser<skill_yi_ya_huan_ya_toc>(() => new skill_yi_ya_huan_ya_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_ya_huan_ya_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_toc(skill_yi_ya_huan_ya_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_ya_huan_ya_toc Clone() {
    return new skill_yi_ya_huan_ya_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_ya_huan_ya_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_ya_huan_ya_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_ya_huan_ya_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 韩梅【移花接木】：争夺阶段，你可以翻开此角色牌，然后从一名角色的情报区选择一张情报，将其置入另一名角色的情报区，若如此做会让其收集三张或更多同色情报，则改为将该情牌加入你的手牌。
/// </summary>
public sealed partial class skill_yi_hua_jie_mu_tos : pb::IMessage<skill_yi_hua_jie_mu_tos> {
  private static readonly pb::MessageParser<skill_yi_hua_jie_mu_tos> _parser = new pb::MessageParser<skill_yi_hua_jie_mu_tos>(() => new skill_yi_hua_jie_mu_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_hua_jie_mu_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_tos(skill_yi_hua_jie_mu_tos other) : this() {
    fromPlayerId_ = other.fromPlayerId_;
    cardId_ = other.cardId_;
    toPlayerId_ = other.toPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_tos Clone() {
    return new skill_yi_hua_jie_mu_tos(this);
  }

  /// <summary>Field number for the "from_player_id" field.</summary>
  public const int FromPlayerIdFieldNumber = 1;
  private uint fromPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FromPlayerId {
    get { return fromPlayerId_; }
    set {
      fromPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "to_player_id" field.</summary>
  public const int ToPlayerIdFieldNumber = 3;
  private uint toPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ToPlayerId {
    get { return toPlayerId_; }
    set {
      toPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_hua_jie_mu_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_hua_jie_mu_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FromPlayerId != other.FromPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (ToPlayerId != other.ToPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FromPlayerId != 0) hash ^= FromPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (ToPlayerId != 0) hash ^= ToPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FromPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(FromPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (ToPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(ToPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FromPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (ToPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_hua_jie_mu_tos other) {
    if (other == null) {
      return;
    }
    if (other.FromPlayerId != 0) {
      FromPlayerId = other.FromPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.ToPlayerId != 0) {
      ToPlayerId = other.ToPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FromPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          ToPlayerId = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【移花接木】
/// </summary>
public sealed partial class skill_yi_hua_jie_mu_toc : pb::IMessage<skill_yi_hua_jie_mu_toc> {
  private static readonly pb::MessageParser<skill_yi_hua_jie_mu_toc> _parser = new pb::MessageParser<skill_yi_hua_jie_mu_toc>(() => new skill_yi_hua_jie_mu_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_hua_jie_mu_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_toc(skill_yi_hua_jie_mu_toc other) : this() {
    playerId_ = other.playerId_;
    fromPlayerId_ = other.fromPlayerId_;
    cardId_ = other.cardId_;
    toPlayerId_ = other.toPlayerId_;
    joinIntoHand_ = other.joinIntoHand_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_hua_jie_mu_toc Clone() {
    return new skill_yi_hua_jie_mu_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "from_player_id" field.</summary>
  public const int FromPlayerIdFieldNumber = 2;
  private uint fromPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FromPlayerId {
    get { return fromPlayerId_; }
    set {
      fromPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "to_player_id" field.</summary>
  public const int ToPlayerIdFieldNumber = 4;
  private uint toPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ToPlayerId {
    get { return toPlayerId_; }
    set {
      toPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "join_into_hand" field.</summary>
  public const int JoinIntoHandFieldNumber = 5;
  private bool joinIntoHand_;
  /// <summary>
  /// 是否改为加入手牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool JoinIntoHand {
    get { return joinIntoHand_; }
    set {
      joinIntoHand_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_hua_jie_mu_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_hua_jie_mu_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (FromPlayerId != other.FromPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (ToPlayerId != other.ToPlayerId) return false;
    if (JoinIntoHand != other.JoinIntoHand) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (FromPlayerId != 0) hash ^= FromPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (ToPlayerId != 0) hash ^= ToPlayerId.GetHashCode();
    if (JoinIntoHand != false) hash ^= JoinIntoHand.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (FromPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(FromPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (ToPlayerId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(ToPlayerId);
    }
    if (JoinIntoHand != false) {
      output.WriteRawTag(40);
      output.WriteBool(JoinIntoHand);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (FromPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (ToPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToPlayerId);
    }
    if (JoinIntoHand != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_hua_jie_mu_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.FromPlayerId != 0) {
      FromPlayerId = other.FromPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.ToPlayerId != 0) {
      ToPlayerId = other.ToPlayerId;
    }
    if (other.JoinIntoHand != false) {
      JoinIntoHand = other.JoinIntoHand;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          FromPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
        case 32: {
          ToPlayerId = input.ReadUInt32();
          break;
        }
        case 40: {
          JoinIntoHand = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 鄭文先【偷天】：争夺阶段你可以翻开此角色牌，然后视为你使用了一张【截获】。
/// </summary>
public sealed partial class skill_tou_tian_tos : pb::IMessage<skill_tou_tian_tos> {
  private static readonly pb::MessageParser<skill_tou_tian_tos> _parser = new pb::MessageParser<skill_tou_tian_tos>(() => new skill_tou_tian_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_tou_tian_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_tos(skill_tou_tian_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_tos Clone() {
    return new skill_tou_tian_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_tou_tian_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_tou_tian_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_tou_tian_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【偷天】
/// </summary>
public sealed partial class skill_tou_tian_toc : pb::IMessage<skill_tou_tian_toc> {
  private static readonly pb::MessageParser<skill_tou_tian_toc> _parser = new pb::MessageParser<skill_tou_tian_toc>(() => new skill_tou_tian_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_tou_tian_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_toc(skill_tou_tian_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_tou_tian_toc Clone() {
    return new skill_tou_tian_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_tou_tian_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_tou_tian_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_tou_tian_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【换日】：你使用【调包】或【破译】后，可以将你的角色牌翻至面朝下。
/// </summary>
public sealed partial class skill_huan_ri_toc : pb::IMessage<skill_huan_ri_toc> {
  private static readonly pb::MessageParser<skill_huan_ri_toc> _parser = new pb::MessageParser<skill_huan_ri_toc>(() => new skill_huan_ri_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_huan_ri_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_huan_ri_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_huan_ri_toc(skill_huan_ri_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_huan_ri_toc Clone() {
    return new skill_huan_ri_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_huan_ri_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_huan_ri_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_huan_ri_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 鬼脚【急送】：争夺阶段限一次，你可以弃置两张手牌，或从你的情报区弃置一张非黑色情报，然后将待收情报移至一名角色面前。
/// </summary>
public sealed partial class skill_ji_song_tos : pb::IMessage<skill_ji_song_tos> {
  private static readonly pb::MessageParser<skill_ji_song_tos> _parser = new pb::MessageParser<skill_ji_song_tos>(() => new skill_ji_song_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_song_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_tos(skill_ji_song_tos other) : this() {
    handCards_ = other.handCards_.Clone();
    messageCard_ = other.messageCard_ != null ? other.messageCard_.Clone() : null;
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_tos Clone() {
    return new skill_ji_song_tos(this);
  }

  /// <summary>Field number for the "hand_cards" field.</summary>
  public const int HandCardsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::card> _repeated_handCards_codec
      = pb::FieldCodec.ForMessage(10, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> handCards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 弃置的两张手牌，和下面的情报二选一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> HandCards {
    get { return handCards_; }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 2;
  private global::card messageCard_;
  /// <summary>
  /// 弃置的情报，和上面的手牌二选一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_song_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_song_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!handCards_.Equals(other.handCards_)) return false;
    if (!object.Equals(MessageCard, other.MessageCard)) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= handCards_.GetHashCode();
    if (messageCard_ != null) hash ^= MessageCard.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    handCards_.WriteTo(output, _repeated_handCards_codec);
    if (messageCard_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(MessageCard);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += handCards_.CalculateSize(_repeated_handCards_codec);
    if (messageCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageCard);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_song_tos other) {
    if (other == null) {
      return;
    }
    handCards_.Add(other.handCards_);
    if (other.messageCard_ != null) {
      if (messageCard_ == null) {
        MessageCard = new global::card();
      }
      MessageCard.MergeFrom(other.MessageCard);
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
          break;
        }
        case 18: {
          if (messageCard_ == null) {
            MessageCard = new global::card();
          }
          input.ReadMessage(MessageCard);
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【急送】
/// </summary>
public sealed partial class skill_ji_song_toc : pb::IMessage<skill_ji_song_toc> {
  private static readonly pb::MessageParser<skill_ji_song_toc> _parser = new pb::MessageParser<skill_ji_song_toc>(() => new skill_ji_song_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_song_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_toc(skill_ji_song_toc other) : this() {
    playerId_ = other.playerId_;
    handCards_ = other.handCards_.Clone();
    messageCard_ = other.messageCard_ != null ? other.messageCard_.Clone() : null;
    targetPlayerId_ = other.targetPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_song_toc Clone() {
    return new skill_ji_song_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "hand_cards" field.</summary>
  public const int HandCardsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::card> _repeated_handCards_codec
      = pb::FieldCodec.ForMessage(18, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> handCards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 弃置的两张手牌，和下面的情报二选一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> HandCards {
    get { return handCards_; }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 3;
  private global::card messageCard_;
  /// <summary>
  /// 弃置的情报，和上面的手牌二选一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 4;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_song_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_song_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if(!handCards_.Equals(other.handCards_)) return false;
    if (!object.Equals(MessageCard, other.MessageCard)) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    hash ^= handCards_.GetHashCode();
    if (messageCard_ != null) hash ^= MessageCard.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    handCards_.WriteTo(output, _repeated_handCards_codec);
    if (messageCard_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MessageCard);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TargetPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    size += handCards_.CalculateSize(_repeated_handCards_codec);
    if (messageCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageCard);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_song_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    handCards_.Add(other.handCards_);
    if (other.messageCard_ != null) {
      if (messageCard_ == null) {
        MessageCard = new global::card();
      }
      MessageCard.MergeFrom(other.MessageCard);
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          handCards_.AddEntriesFrom(input, _repeated_handCards_codec);
          break;
        }
        case 26: {
          if (messageCard_ == null) {
            MessageCard = new global::card();
          }
          input.ReadMessage(MessageCard);
          break;
        }
        case 32: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 邵秀【绵里藏针】：你传出的情报被接收后，可以将一张黑色手牌置入接收者的情报区，然后摸一张牌。
/// </summary>
public sealed partial class skill_mian_li_cang_zhen_tos : pb::IMessage<skill_mian_li_cang_zhen_tos> {
  private static readonly pb::MessageParser<skill_mian_li_cang_zhen_tos> _parser = new pb::MessageParser<skill_mian_li_cang_zhen_tos>(() => new skill_mian_li_cang_zhen_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_mian_li_cang_zhen_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_tos(skill_mian_li_cang_zhen_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_tos Clone() {
    return new skill_mian_li_cang_zhen_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_mian_li_cang_zhen_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_mian_li_cang_zhen_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_mian_li_cang_zhen_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【绵里藏针】
/// </summary>
public sealed partial class skill_mian_li_cang_zhen_toc : pb::IMessage<skill_mian_li_cang_zhen_toc> {
  private static readonly pb::MessageParser<skill_mian_li_cang_zhen_toc> _parser = new pb::MessageParser<skill_mian_li_cang_zhen_toc>(() => new skill_mian_li_cang_zhen_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_mian_li_cang_zhen_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_toc(skill_mian_li_cang_zhen_toc other) : this() {
    playerId_ = other.playerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    targetPlayerId_ = other.targetPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_mian_li_cang_zhen_toc Clone() {
    return new skill_mian_li_cang_zhen_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 2;
  private global::card card_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_mian_li_cang_zhen_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_mian_li_cang_zhen_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Card);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_mian_li_cang_zhen_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 金生火【谨慎】：你接收双色情报后，可以用一张手牌与该情报面朝上互换。
/// </summary>
public sealed partial class skill_jin_shen_tos : pb::IMessage<skill_jin_shen_tos> {
  private static readonly pb::MessageParser<skill_jin_shen_tos> _parser = new pb::MessageParser<skill_jin_shen_tos>(() => new skill_jin_shen_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_shen_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_tos(skill_jin_shen_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_tos Clone() {
    return new skill_jin_shen_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_shen_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_shen_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_shen_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【谨慎】
/// </summary>
public sealed partial class skill_jin_shen_toc : pb::IMessage<skill_jin_shen_toc> {
  private static readonly pb::MessageParser<skill_jin_shen_toc> _parser = new pb::MessageParser<skill_jin_shen_toc>(() => new skill_jin_shen_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jin_shen_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_toc(skill_jin_shen_toc other) : this() {
    playerId_ = other.playerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jin_shen_toc Clone() {
    return new skill_jin_shen_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 2;
  private global::card card_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jin_shen_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jin_shen_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Card);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jin_shen_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 白菲菲【怜悯】：你传出的非黑色情报被接收后，可以从你或接收者的情报区选择一张黑色情报加入你的手牌。
/// </summary>
public sealed partial class skill_lian_min_tos : pb::IMessage<skill_lian_min_tos> {
  private static readonly pb::MessageParser<skill_lian_min_tos> _parser = new pb::MessageParser<skill_lian_min_tos>(() => new skill_lian_min_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_lian_min_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_tos(skill_lian_min_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_tos Clone() {
    return new skill_lian_min_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_lian_min_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_lian_min_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_lian_min_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【怜悯】
/// </summary>
public sealed partial class skill_lian_min_toc : pb::IMessage<skill_lian_min_toc> {
  private static readonly pb::MessageParser<skill_lian_min_toc> _parser = new pb::MessageParser<skill_lian_min_toc>(() => new skill_lian_min_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_lian_min_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_toc(skill_lian_min_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_lian_min_toc Clone() {
    return new skill_lian_min_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_lian_min_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_lian_min_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_lian_min_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【腹黑】：你传出的黑色情报被接收后，你摸一张牌。
/// </summary>
public sealed partial class skill_fu_hei_toc : pb::IMessage<skill_fu_hei_toc> {
  private static readonly pb::MessageParser<skill_fu_hei_toc> _parser = new pb::MessageParser<skill_fu_hei_toc>(() => new skill_fu_hei_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_fu_hei_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_fu_hei_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_fu_hei_toc(skill_fu_hei_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_fu_hei_toc Clone() {
    return new skill_fu_hei_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_fu_hei_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_fu_hei_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_fu_hei_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 端木静【新思潮】：出牌阶段限一次，你可以弃置一张手牌，然后摸两张牌。
/// </summary>
public sealed partial class skill_xin_si_chao_tos : pb::IMessage<skill_xin_si_chao_tos> {
  private static readonly pb::MessageParser<skill_xin_si_chao_tos> _parser = new pb::MessageParser<skill_xin_si_chao_tos>(() => new skill_xin_si_chao_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_xin_si_chao_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_tos(skill_xin_si_chao_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_tos Clone() {
    return new skill_xin_si_chao_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_xin_si_chao_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_xin_si_chao_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_xin_si_chao_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【新思潮】，弃牌和摸牌走原本的协议
/// </summary>
public sealed partial class skill_xin_si_chao_toc : pb::IMessage<skill_xin_si_chao_toc> {
  private static readonly pb::MessageParser<skill_xin_si_chao_toc> _parser = new pb::MessageParser<skill_xin_si_chao_toc>(() => new skill_xin_si_chao_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_xin_si_chao_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_toc(skill_xin_si_chao_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_xin_si_chao_toc Clone() {
    return new skill_xin_si_chao_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_xin_si_chao_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_xin_si_chao_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_xin_si_chao_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【视死】：你接收黑色情报后，摸两张牌
/// </summary>
public sealed partial class skill_shi_si_toc : pb::IMessage<skill_shi_si_toc> {
  private static readonly pb::MessageParser<skill_shi_si_toc> _parser = new pb::MessageParser<skill_shi_si_toc>(() => new skill_shi_si_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_shi_si_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_shi_si_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_shi_si_toc(skill_shi_si_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_shi_si_toc Clone() {
    return new skill_shi_si_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_shi_si_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_shi_si_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_shi_si_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【如归】
/// </summary>
public sealed partial class skill_wait_for_ru_gui_toc : pb::IMessage<skill_wait_for_ru_gui_toc> {
  private static readonly pb::MessageParser<skill_wait_for_ru_gui_toc> _parser = new pb::MessageParser<skill_wait_for_ru_gui_toc>(() => new skill_wait_for_ru_gui_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_ru_gui_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_ru_gui_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_ru_gui_toc(skill_wait_for_ru_gui_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_ru_gui_toc Clone() {
    return new skill_wait_for_ru_gui_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_ru_gui_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_ru_gui_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_ru_gui_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 老汉【如归】：你死亡前，可以将你情报区中的一张情报置入当前回合角色的情报区中。
/// </summary>
public sealed partial class skill_ru_gui_tos : pb::IMessage<skill_ru_gui_tos> {
  private static readonly pb::MessageParser<skill_ru_gui_tos> _parser = new pb::MessageParser<skill_ru_gui_tos>(() => new skill_ru_gui_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ru_gui_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_tos(skill_ru_gui_tos other) : this() {
    enable_ = other.enable_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_tos Clone() {
    return new skill_ru_gui_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ru_gui_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ru_gui_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ru_gui_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【如归】
/// </summary>
public sealed partial class skill_ru_gui_toc : pb::IMessage<skill_ru_gui_toc> {
  private static readonly pb::MessageParser<skill_ru_gui_toc> _parser = new pb::MessageParser<skill_ru_gui_toc>(() => new skill_ru_gui_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ru_gui_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_toc(skill_ru_gui_toc other) : this() {
    playerId_ = other.playerId_;
    cardId_ = other.cardId_;
    enable_ = other.enable_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ru_gui_toc Clone() {
    return new skill_ru_gui_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 3;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ru_gui_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ru_gui_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Enable != other.Enable) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (Enable != false) {
      output.WriteRawTag(24);
      output.WriteBool(Enable);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Enable != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ru_gui_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          Enable = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【转交】
/// </summary>
public sealed partial class skill_wait_for_zhuan_jiao_toc : pb::IMessage<skill_wait_for_zhuan_jiao_toc> {
  private static readonly pb::MessageParser<skill_wait_for_zhuan_jiao_toc> _parser = new pb::MessageParser<skill_wait_for_zhuan_jiao_toc>(() => new skill_wait_for_zhuan_jiao_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_zhuan_jiao_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_zhuan_jiao_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_zhuan_jiao_toc(skill_wait_for_zhuan_jiao_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_zhuan_jiao_toc Clone() {
    return new skill_wait_for_zhuan_jiao_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_zhuan_jiao_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_zhuan_jiao_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_zhuan_jiao_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 白小年【转交】：你使用一张手牌后，可以从你的情报区选择一张非黑色情报，将其置入另一名角色的情报区，然后你摸两张牌。你不能通过此技能让任何角色收集三张或更多同色情报。
/// </summary>
public sealed partial class skill_zhuan_jiao_tos : pb::IMessage<skill_zhuan_jiao_tos> {
  private static readonly pb::MessageParser<skill_zhuan_jiao_tos> _parser = new pb::MessageParser<skill_zhuan_jiao_tos>(() => new skill_zhuan_jiao_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_zhuan_jiao_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_tos(skill_zhuan_jiao_tos other) : this() {
    cardId_ = other.cardId_;
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_tos Clone() {
    return new skill_zhuan_jiao_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_zhuan_jiao_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_zhuan_jiao_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_zhuan_jiao_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【转交】
/// </summary>
public sealed partial class skill_zhuan_jiao_toc : pb::IMessage<skill_zhuan_jiao_toc> {
  private static readonly pb::MessageParser<skill_zhuan_jiao_toc> _parser = new pb::MessageParser<skill_zhuan_jiao_toc>(() => new skill_zhuan_jiao_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_zhuan_jiao_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_toc(skill_zhuan_jiao_toc other) : this() {
    playerId_ = other.playerId_;
    cardId_ = other.cardId_;
    targetPlayerId_ = other.targetPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_zhuan_jiao_toc Clone() {
    return new skill_zhuan_jiao_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_zhuan_jiao_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_zhuan_jiao_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (CardId != other.CardId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_zhuan_jiao_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【明饵】：你传出的红色或蓝色情报被接收后，你和接收者各摸一张牌。
/// </summary>
public sealed partial class skill_ming_er_toc : pb::IMessage<skill_ming_er_toc> {
  private static readonly pb::MessageParser<skill_ming_er_toc> _parser = new pb::MessageParser<skill_ming_er_toc>(() => new skill_ming_er_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ming_er_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ming_er_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ming_er_toc(skill_ming_er_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ming_er_toc Clone() {
    return new skill_ming_er_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ming_er_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ming_er_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ming_er_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 顾小梦【集智】：一名角色濒死时，或争夺阶段，你可以翻开此角色牌，然后摸四张牌。
/// </summary>
public sealed partial class skill_ji_zhi_tos : pb::IMessage<skill_ji_zhi_tos> {
  private static readonly pb::MessageParser<skill_ji_zhi_tos> _parser = new pb::MessageParser<skill_ji_zhi_tos>(() => new skill_ji_zhi_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_zhi_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_tos(skill_ji_zhi_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_tos Clone() {
    return new skill_ji_zhi_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_zhi_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_zhi_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_zhi_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【集智】
/// </summary>
public sealed partial class skill_ji_zhi_toc : pb::IMessage<skill_ji_zhi_toc> {
  private static readonly pb::MessageParser<skill_ji_zhi_toc> _parser = new pb::MessageParser<skill_ji_zhi_toc>(() => new skill_ji_zhi_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_ji_zhi_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_toc(skill_ji_zhi_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_ji_zhi_toc Clone() {
    return new skill_ji_zhi_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_ji_zhi_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_ji_zhi_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_ji_zhi_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【承志】
/// </summary>
public sealed partial class skill_wait_for_cheng_zhi_toc : pb::IMessage<skill_wait_for_cheng_zhi_toc> {
  private static readonly pb::MessageParser<skill_wait_for_cheng_zhi_toc> _parser = new pb::MessageParser<skill_wait_for_cheng_zhi_toc>(() => new skill_wait_for_cheng_zhi_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_cheng_zhi_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_cheng_zhi_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_cheng_zhi_toc(skill_wait_for_cheng_zhi_toc other) : this() {
    playerId_ = other.playerId_;
    diePlayerId_ = other.diePlayerId_;
    cards_ = other.cards_.Clone();
    identity_ = other.identity_;
    secretTask_ = other.secretTask_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_cheng_zhi_toc Clone() {
    return new skill_wait_for_cheng_zhi_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 发动者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "die_player_id" field.</summary>
  public const int DiePlayerIdFieldNumber = 2;
  private uint diePlayerId_;
  /// <summary>
  /// 死亡角色
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DiePlayerId {
    get { return diePlayerId_; }
    set {
      diePlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 死亡角色的所有手牌（只有发动者能看到）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  /// <summary>Field number for the "identity" field.</summary>
  public const int IdentityFieldNumber = 4;
  private global::color identity_ = global::color.Black;
  /// <summary>
  /// 死亡角色的身份牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::color Identity {
    get { return identity_; }
    set {
      identity_ = value;
    }
  }

  /// <summary>Field number for the "secret_task" field.</summary>
  public const int SecretTaskFieldNumber = 5;
  private global::secret_task secretTask_ = global::secret_task.Killer;
  /// <summary>
  /// 死亡角色的机密任务（如果是神秘人）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::secret_task SecretTask {
    get { return secretTask_; }
    set {
      secretTask_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 6;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 7;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_cheng_zhi_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_cheng_zhi_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (DiePlayerId != other.DiePlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    if (Identity != other.Identity) return false;
    if (SecretTask != other.SecretTask) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (DiePlayerId != 0) hash ^= DiePlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (Identity != global::color.Black) hash ^= Identity.GetHashCode();
    if (SecretTask != global::secret_task.Killer) hash ^= SecretTask.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (DiePlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(DiePlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (Identity != global::color.Black) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Identity);
    }
    if (SecretTask != global::secret_task.Killer) {
      output.WriteRawTag(40);
      output.WriteEnum((int) SecretTask);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (DiePlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiePlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (Identity != global::color.Black) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Identity);
    }
    if (SecretTask != global::secret_task.Killer) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecretTask);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_cheng_zhi_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.DiePlayerId != 0) {
      DiePlayerId = other.DiePlayerId;
    }
    cards_.Add(other.cards_);
    if (other.Identity != global::color.Black) {
      Identity = other.Identity;
    }
    if (other.SecretTask != global::secret_task.Killer) {
      SecretTask = other.SecretTask;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          DiePlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
        case 32: {
          Identity = (global::color) input.ReadEnum();
          break;
        }
        case 40: {
          SecretTask = (global::secret_task) input.ReadEnum();
          break;
        }
        case 48: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 56: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 顾小梦【承志】：一名其他角色死亡前，若此角色牌已翻开，则你获得其所有手牌，并查看其身份牌，你可以获得该身份牌，并将你原本的身份牌面朝下移出游戏。
/// </summary>
public sealed partial class skill_cheng_zhi_tos : pb::IMessage<skill_cheng_zhi_tos> {
  private static readonly pb::MessageParser<skill_cheng_zhi_tos> _parser = new pb::MessageParser<skill_cheng_zhi_tos>(() => new skill_cheng_zhi_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_cheng_zhi_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_tos(skill_cheng_zhi_tos other) : this() {
    enable_ = other.enable_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_tos Clone() {
    return new skill_cheng_zhi_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_cheng_zhi_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_cheng_zhi_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_cheng_zhi_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【承志】
/// </summary>
public sealed partial class skill_cheng_zhi_toc : pb::IMessage<skill_cheng_zhi_toc> {
  private static readonly pb::MessageParser<skill_cheng_zhi_toc> _parser = new pb::MessageParser<skill_cheng_zhi_toc>(() => new skill_cheng_zhi_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_cheng_zhi_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_toc(skill_cheng_zhi_toc other) : this() {
    playerId_ = other.playerId_;
    diePlayerId_ = other.diePlayerId_;
    enable_ = other.enable_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_zhi_toc Clone() {
    return new skill_cheng_zhi_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 发动者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "die_player_id" field.</summary>
  public const int DiePlayerIdFieldNumber = 2;
  private uint diePlayerId_;
  /// <summary>
  /// 死亡角色
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DiePlayerId {
    get { return diePlayerId_; }
    set {
      diePlayerId_ = value;
    }
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 3;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_cheng_zhi_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_cheng_zhi_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (DiePlayerId != other.DiePlayerId) return false;
    if (Enable != other.Enable) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (DiePlayerId != 0) hash ^= DiePlayerId.GetHashCode();
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (DiePlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(DiePlayerId);
    }
    if (Enable != false) {
      output.WriteRawTag(24);
      output.WriteBool(Enable);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (DiePlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiePlayerId);
    }
    if (Enable != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_cheng_zhi_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.DiePlayerId != 0) {
      DiePlayerId = other.DiePlayerId;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          DiePlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          Enable = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【就计】A：你被【试探】【威逼】或【利诱】指定为目标后，你可以翻开此角色牌，然后摸两张牌。
/// </summary>
public sealed partial class skill_jiu_ji_a_toc : pb::IMessage<skill_jiu_ji_a_toc> {
  private static readonly pb::MessageParser<skill_jiu_ji_a_toc> _parser = new pb::MessageParser<skill_jiu_ji_a_toc>(() => new skill_jiu_ji_a_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiu_ji_a_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_a_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_a_toc(skill_jiu_ji_a_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_a_toc Clone() {
    return new skill_jiu_ji_a_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiu_ji_a_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiu_ji_a_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiu_ji_a_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【城府】：【试探】和【威逼】对你无效。
/// </summary>
public sealed partial class skill_cheng_fu_toc : pb::IMessage<skill_cheng_fu_toc> {
  private static readonly pb::MessageParser<skill_cheng_fu_toc> _parser = new pb::MessageParser<skill_cheng_fu_toc>(() => new skill_cheng_fu_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_cheng_fu_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_fu_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_fu_toc(skill_cheng_fu_toc other) : this() {
    playerId_ = other.playerId_;
    fromPlayerId_ = other.fromPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    unknownCardCount_ = other.unknownCardCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_cheng_fu_toc Clone() {
    return new skill_cheng_fu_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "from_player_id" field.</summary>
  public const int FromPlayerIdFieldNumber = 2;
  private uint fromPlayerId_;
  /// <summary>
  /// 使用那张牌的玩家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FromPlayerId {
    get { return fromPlayerId_; }
    set {
      fromPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  /// <summary>
  /// 使用的那张牌。因为肥原龙川可以视为使用了【威逼】，因此这个字段可能为空。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "unknown_card_count" field.</summary>
  public const int UnknownCardCountFieldNumber = 4;
  private uint unknownCardCount_;
  /// <summary>
  /// 如果是【试探】且结算后要被李宁玉拿走时，其他人将会看不到这张牌。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnknownCardCount {
    get { return unknownCardCount_; }
    set {
      unknownCardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_cheng_fu_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_cheng_fu_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (FromPlayerId != other.FromPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (UnknownCardCount != other.UnknownCardCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (FromPlayerId != 0) hash ^= FromPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (UnknownCardCount != 0) hash ^= UnknownCardCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (FromPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(FromPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (UnknownCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(UnknownCardCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (FromPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (UnknownCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnknownCardCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_cheng_fu_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.FromPlayerId != 0) {
      FromPlayerId = other.FromPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.UnknownCardCount != 0) {
      UnknownCardCount = other.UnknownCardCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          FromPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 32: {
          UnknownCardCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【就计】B：并在触发此技能的卡牌结算后，将其加入你的手牌。
/// </summary>
public sealed partial class skill_jiu_ji_b_toc : pb::IMessage<skill_jiu_ji_b_toc> {
  private static readonly pb::MessageParser<skill_jiu_ji_b_toc> _parser = new pb::MessageParser<skill_jiu_ji_b_toc>(() => new skill_jiu_ji_b_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_jiu_ji_b_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_b_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_b_toc(skill_jiu_ji_b_toc other) : this() {
    playerId_ = other.playerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    unknownCardCount_ = other.unknownCardCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_jiu_ji_b_toc Clone() {
    return new skill_jiu_ji_b_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 2;
  private global::card card_;
  /// <summary>
  /// 拿走的那张卡牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "unknown_card_count" field.</summary>
  public const int UnknownCardCountFieldNumber = 3;
  private uint unknownCardCount_;
  /// <summary>
  /// 如果是【试探】且结算后要被李宁玉拿走时，其他人将会看不到这张牌。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnknownCardCount {
    get { return unknownCardCount_; }
    set {
      unknownCardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_jiu_ji_b_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_jiu_ji_b_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (UnknownCardCount != other.UnknownCardCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (UnknownCardCount != 0) hash ^= UnknownCardCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Card);
    }
    if (UnknownCardCount != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(UnknownCardCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (UnknownCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnknownCardCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_jiu_ji_b_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.UnknownCardCount != 0) {
      UnknownCardCount = other.UnknownCardCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 24: {
          UnknownCardCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播询问客户端使用【遗信】
/// </summary>
public sealed partial class skill_wait_for_yi_xin_toc : pb::IMessage<skill_wait_for_yi_xin_toc> {
  private static readonly pb::MessageParser<skill_wait_for_yi_xin_toc> _parser = new pb::MessageParser<skill_wait_for_yi_xin_toc>(() => new skill_wait_for_yi_xin_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_wait_for_yi_xin_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_yi_xin_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_yi_xin_toc(skill_wait_for_yi_xin_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_wait_for_yi_xin_toc Clone() {
    return new skill_wait_for_yi_xin_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_wait_for_yi_xin_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_wait_for_yi_xin_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_wait_for_yi_xin_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 李宁玉【遗信】：你死亡前，可以将一张手牌置入另一名角色的情报区。
/// </summary>
public sealed partial class skill_yi_xin_tos : pb::IMessage<skill_yi_xin_tos> {
  private static readonly pb::MessageParser<skill_yi_xin_tos> _parser = new pb::MessageParser<skill_yi_xin_tos>(() => new skill_yi_xin_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_xin_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_tos(skill_yi_xin_tos other) : this() {
    enable_ = other.enable_;
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_tos Clone() {
    return new skill_yi_xin_tos(this);
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 1;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_xin_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_xin_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Enable != other.Enable) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Enable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Enable);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Enable != false) {
      size += 1 + 1;
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_xin_tos other) {
    if (other == null) {
      return;
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Enable = input.ReadBool();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 广播使用【遗信】
/// </summary>
public sealed partial class skill_yi_xin_toc : pb::IMessage<skill_yi_xin_toc> {
  private static readonly pb::MessageParser<skill_yi_xin_toc> _parser = new pb::MessageParser<skill_yi_xin_toc>(() => new skill_yi_xin_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<skill_yi_xin_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoleReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_toc(skill_yi_xin_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    enable_ = other.enable_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public skill_yi_xin_toc Clone() {
    return new skill_yi_xin_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "enable" field.</summary>
  public const int EnableFieldNumber = 4;
  private bool enable_;
  /// <summary>
  /// 是否发动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Enable {
    get { return enable_; }
    set {
      enable_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as skill_yi_xin_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(skill_yi_xin_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (Enable != other.Enable) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (Enable != false) hash ^= Enable.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (Enable != false) {
      output.WriteRawTag(32);
      output.WriteBool(Enable);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (Enable != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(skill_yi_xin_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.Enable != false) {
      Enable = other.Enable;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 32: {
          Enable = input.ReadBool();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
