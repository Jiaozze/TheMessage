// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fengsheng.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from fengsheng.proto</summary>
public static partial class FengshengReflection {

  #region Descriptor
  /// <summary>File descriptor for fengsheng.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FengshengReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9mZW5nc2hlbmcucHJvdG8aDGNvbW1vbi5wcm90byIWChRhZGRfb25lX3Bv",
          "c2l0aW9uX3RvcyIWChRhZGRfb25lX3Bvc2l0aW9uX3RvYyIZChdyZW1vdmVf",
          "b25lX3Bvc2l0aW9uX3RvcyIrChdyZW1vdmVfb25lX3Bvc2l0aW9uX3RvYxIQ",
          "Cghwb3NpdGlvbhgBIAEoDSI4ChJkaXNwbGF5X3JlY29yZF90b3MSDwoHdmVy",
          "c2lvbhgBIAEoDRIRCglyZWNvcmRfaWQYAiABKAkiGAoWZGlzcGxheV9yZWNv",
          "cmRfZW5kX3RvYyIsChdzYXZlX3JlY29yZF9zdWNjZXNzX3RvYxIRCglyZWNv",
          "cmRfaWQYASABKAkiPgoNam9pbl9yb29tX3RvcxIPCgd2ZXJzaW9uGAEgASgN",
          "EgwKBG5hbWUYAiABKAkSDgoGZGV2aWNlGAMgASgJIjcKEWdldF9yb29tX2lu",
          "Zm9fdG9jEg0KBW5hbWVzGAEgAygJEhMKC215X3Bvc2l0aW9uGAIgASgNIg8K",
          "DWFkZF9yb2JvdF90b3MiEgoQcmVtb3ZlX3JvYm90X3RvcyIvCg1qb2luX3Jv",
          "b21fdG9jEgwKBG5hbWUYASABKAkSEAoIcG9zaXRpb24YAiABKA0iIgoObGVh",
          "dmVfcm9vbV90b2MSEAoIcG9zaXRpb24YASABKA0imwEKGHdhaXRfZm9yX3Nl",
          "bGVjdF9yb2xlX3RvYxIUCgxwbGF5ZXJfY291bnQYASABKA0SGAoIaWRlbnRp",
          "dHkYAiABKA4yBi5jb2xvchIhCgtzZWNyZXRfdGFzaxgDIAEoDjIMLnNlY3Jl",
          "dF90YXNrEhQKBXJvbGVzGAQgAygOMgUucm9sZRIWCg53YWl0aW5nX3NlY29u",
          "ZBgFIAEoDSImCg9zZWxlY3Rfcm9sZV90b3MSEwoEcm9sZRgBIAEoDjIFLnJv",
          "bGUiggEKCGluaXRfdG9jEhQKDHBsYXllcl9jb3VudBgBIAEoDRIYCghpZGVu",
          "dGl0eRgCIAEoDjIGLmNvbG9yEiEKC3NlY3JldF90YXNrGAMgASgOMgwuc2Vj",
          "cmV0X3Rhc2sSFAoFcm9sZXMYBCADKA4yBS5yb2xlEg0KBW5hbWVzGAUgAygJ",
          "IkAKFm5vdGlmeV9yb2xlX3VwZGF0ZV90b2MSEQoJcGxheWVyX2lkGAEgASgN",
          "EhMKBHJvbGUYAiABKA4yBS5yb2xlIlMKDGFkZF9jYXJkX3RvYxIRCglwbGF5",
          "ZXJfaWQYASABKA0SGgoSdW5rbm93bl9jYXJkX2NvdW50GAIgASgNEhQKBWNh",
          "cmRzGAMgAygLMgUuY2FyZCJCCg91c2Vfc2hpX3Rhbl90b3MSDwoHY2FyZF9p",
          "ZBgBIAEoDRIRCglwbGF5ZXJfaWQYAiABKA0SCwoDc2VxGAMgASgNIk8KD3Vz",
          "ZV9zaGlfdGFuX3RvYxIRCglwbGF5ZXJfaWQYASABKA0SGAoQdGFyZ2V0X3Bs",
          "YXllcl9pZBgCIAEoDRIPCgdjYXJkX2lkGAMgASgNInkKEHNob3dfc2hpX3Rh",
          "bl90b2MSEQoJcGxheWVyX2lkGAEgASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQY",
          "AiABKA0SEwoEY2FyZBgDIAEoCzIFLmNhcmQSFgoOd2FpdGluZ19zZWNvbmQY",
          "BCABKA0SCwoDc2VxGAUgASgNIjMKE2V4ZWN1dGVfc2hpX3Rhbl90b3MSDwoH",
          "Y2FyZF9pZBgBIAMoDRILCgNzZXEYAiABKA0iPgoTZXhlY3V0ZV9zaGlfdGFu",
          "X3RvYxIRCglwbGF5ZXJfaWQYASABKA0SFAoMaXNfZHJhd19jYXJkGAIgASgI",
          "IjIKEXN5bmNfZGVja19udW1fdG9jEgsKA251bRgBIAEoDRIQCghzaHVmZmxl",
          "ZBgCIAEoCCI7ChBkaXNjYXJkX2NhcmRfdG9jEhEKCXBsYXllcl9pZBgBIAEo",
          "DRIUCgVjYXJkcxgCIAMoCzIFLmNhcmQi6gEKEG5vdGlmeV9waGFzZV90b2MS",
          "GQoRY3VycmVudF9wbGF5ZXJfaWQYASABKA0SHQoNY3VycmVudF9waGFzZRgC",
          "IAEoDjIGLnBoYXNlEhkKEW1lc3NhZ2VfcGxheWVyX2lkGAMgASgNEiQKEG1l",
          "c3NhZ2VfY2FyZF9kaXIYBCABKA4yCi5kaXJlY3Rpb24SGwoMbWVzc2FnZV9j",
          "YXJkGAUgASgLMgUuY2FyZBIZChF3YWl0aW5nX3BsYXllcl9pZBgGIAEoDRIW",
          "Cg53YWl0aW5nX3NlY29uZBgHIAEoDRILCgNzZXEYCCABKA0iIQoSZW5kX21h",
          "aW5fcGhhc2VfdG9zEgsKA3NlcRgBIAEoDSJBCg51c2VfbGlfeW91X3RvcxIP",
          "CgdjYXJkX2lkGAEgASgNEhEKCXBsYXllcl9pZBgCIAEoDRILCgNzZXEYAyAB",
          "KA0ijgEKDnVzZV9saV95b3VfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIYChB0",
          "YXJnZXRfcGxheWVyX2lkGAIgASgNEhoKC2xpX3lvdV9jYXJkGAMgASgLMgUu",
          "Y2FyZBIbCgxtZXNzYWdlX2NhcmQYBCABKAsyBS5jYXJkEhYKDmpvaW5faW50",
          "b19oYW5kGAUgASgIIkQKEXVzZV9waW5nX2hlbmdfdG9zEg8KB2NhcmRfaWQY",
          "ASABKA0SEQoJcGxheWVyX2lkGAIgASgNEgsKA3NlcRgDIAEoDSJfChF1c2Vf",
          "cGluZ19oZW5nX3RvYxIRCglwbGF5ZXJfaWQYASABKA0SGAoQdGFyZ2V0X3Bs",
          "YXllcl9pZBgCIAEoDRIdCg5waW5nX2hlbmdfY2FyZBgDIAEoCzIFLmNhcmQi",
          "YAoOdXNlX3dlaV9iaV90b3MSDwoHY2FyZF9pZBgBIAEoDRIRCglwbGF5ZXJf",
          "aWQYAiABKA0SHQoJd2FudF90eXBlGAMgASgOMgouY2FyZF90eXBlEgsKA3Nl",
          "cRgEIAEoDSKlAQodd2VpX2JpX3dhaXRfZm9yX2dpdmVfY2FyZF90b2MSEwoE",
          "Y2FyZBgBIAEoCzIFLmNhcmQSEQoJcGxheWVyX2lkGAIgASgNEhgKEHRhcmdl",
          "dF9wbGF5ZXJfaWQYAyABKA0SHQoJd2FudF90eXBlGAQgASgOMgouY2FyZF90",
          "eXBlEhYKDndhaXRpbmdfc2Vjb25kGAUgASgNEgsKA3NlcRgGIAEoDSI0ChR3",
          "ZWlfYmlfZ2l2ZV9jYXJkX3RvcxIPCgdjYXJkX2lkGAEgASgNEgsKA3NlcRgC",
          "IAEoDSJYChR3ZWlfYmlfZ2l2ZV9jYXJkX3RvYxIRCglwbGF5ZXJfaWQYASAB",
          "KA0SGAoQdGFyZ2V0X3BsYXllcl9pZBgCIAEoDRITCgRjYXJkGAMgASgLMgUu",
          "Y2FyZCKSAQoZd2VpX2JpX3Nob3dfaGFuZF9jYXJkX3RvYxITCgRjYXJkGAEg",
          "ASgLMgUuY2FyZBIRCglwbGF5ZXJfaWQYAiABKA0SHQoJd2FudF90eXBlGAMg",
          "ASgOMgouY2FyZF90eXBlEhgKEHRhcmdldF9wbGF5ZXJfaWQYBCABKA0SFAoF",
          "Y2FyZHMYBSADKAsyBS5jYXJkIl0KEnVzZV9jaGVuZ19xaW5nX3RvcxIPCgdj",
          "YXJkX2lkGAEgASgNEhEKCXBsYXllcl9pZBgCIAEoDRIWCg50YXJnZXRfY2Fy",
          "ZF9pZBgDIAEoDRILCgNzZXEYBCABKA0ibgoSdXNlX2NoZW5nX3FpbmdfdG9j",
          "EhMKBGNhcmQYASABKAsyBS5jYXJkEhEKCXBsYXllcl9pZBgCIAEoDRIYChB0",
          "YXJnZXRfcGxheWVyX2lkGAMgASgNEhYKDnRhcmdldF9jYXJkX2lkGAQgASgN",
          "IoUBChVzZW5kX21lc3NhZ2VfY2FyZF90b3MSDwoHY2FyZF9pZBgBIAEoDRIY",
          "ChB0YXJnZXRfcGxheWVyX2lkGAIgASgNEhYKDmxvY2tfcGxheWVyX2lkGAMg",
          "AygNEhwKCGNhcmRfZGlyGAQgASgOMgouZGlyZWN0aW9uEgsKA3NlcRgFIAEo",
          "DSKMAQoVc2VuZF9tZXNzYWdlX2NhcmRfdG9jEg8KB2NhcmRfaWQYASABKA0S",
          "EQoJcGxheWVyX2lkGAIgASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQYAyABKA0S",
          "FwoPbG9ja19wbGF5ZXJfaWRzGAQgAygNEhwKCGNhcmRfZGlyGAUgASgOMgou",
          "ZGlyZWN0aW9uIjoKGmNob29zZV93aGV0aGVyX3JlY2VpdmVfdG9zEg8KB3Jl",
          "Y2VpdmUYASABKAgSCwoDc2VxGAIgASgNIicKEmNob29zZV9yZWNlaXZlX3Rv",
          "YxIRCglwbGF5ZXJfaWQYASABKA0iIgoTZW5kX2ZpZ2h0X3BoYXNlX3RvcxIL",
          "CgNzZXEYASABKA0iOAoQbm90aWZ5X2R5aW5nX3RvYxIRCglwbGF5ZXJfaWQY",
          "ASABKA0SEQoJbG9zZV9nYW1lGAIgASgIIiMKDm5vdGlmeV9kaWVfdG9jEhEK",
          "CXBsYXllcl9pZBgBIAEoDSKBAQoRbm90aWZ5X3dpbm5lcl90b2MSGgoSZGVj",
          "bGFyZV9wbGF5ZXJfaWRzGAEgAygNEhIKCndpbm5lcl9pZHMYAiADKA0SGAoI",
          "aWRlbnRpdHkYAyADKA4yBi5jb2xvchIiCgxzZWNyZXRfdGFza3MYBCADKA4y",
          "DC5zZWNyZXRfdGFzayJwChd3YWl0X2Zvcl9jaGVuZ19xaW5nX3RvYxIVCg1k",
          "aWVfcGxheWVyX2lkGAEgASgNEhkKEXdhaXRpbmdfcGxheWVyX2lkGAIgASgN",
          "EhYKDndhaXRpbmdfc2Vjb25kGAMgASgNEgsKA3NlcRgEIAEoDSJcChdjaGVu",
          "Z19xaW5nX3NhdmVfZGllX3RvcxILCgN1c2UYASABKAgSDwoHY2FyZF9pZBgC",
          "IAEoDRIWCg50YXJnZXRfY2FyZF9pZBgDIAEoDRILCgNzZXEYBCABKA0iVAoa",
          "d2FpdF9mb3JfZGllX2dpdmVfY2FyZF90b2MSEQoJcGxheWVyX2lkGAEgASgN",
          "EhYKDndhaXRpbmdfc2Vjb25kGAIgASgNEgsKA3NlcRgDIAEoDSJLChFkaWVf",
          "Z2l2ZV9jYXJkX3RvcxIYChB0YXJnZXRfcGxheWVyX2lkGAEgASgNEg8KB2Nh",
          "cmRfaWQYAiADKA0SCwoDc2VxGAMgASgNIngKGG5vdGlmeV9kaWVfZ2l2ZV9j",
          "YXJkX3RvYxIRCglwbGF5ZXJfaWQYASABKA0SGAoQdGFyZ2V0X3BsYXllcl9p",
          "ZBgCIAEoDRITCgRjYXJkGAMgAygLMgUuY2FyZBIaChJ1bmtub3duX2NhcmRf",
          "Y291bnQYBCABKA0iLQoNdXNlX3BvX3lpX3RvcxIPCgdjYXJkX2lkGAEgASgN",
          "EgsKA3NlcRgCIAEoDSJ5Cg11c2VfcG9feWlfdG9jEhMKBGNhcmQYASABKAsy",
          "BS5jYXJkEhEKCXBsYXllcl9pZBgCIAEoDRIbCgxtZXNzYWdlX2NhcmQYAyAB",
          "KAsyBS5jYXJkEhYKDndhaXRpbmdfc2Vjb25kGAQgASgNEgsKA3NlcRgFIAEo",
          "DSIrCg5wb195aV9zaG93X3RvcxIMCgRzaG93GAEgASgIEgsKA3NlcRgCIAEo",
          "DSJOCg5wb195aV9zaG93X3RvYxIRCglwbGF5ZXJfaWQYASABKA0SDAoEc2hv",
          "dxgCIAEoCBIbCgxtZXNzYWdlX2NhcmQYAyABKAsyBS5jYXJkIi8KD3VzZV9q",
          "aWVfaHVvX3RvcxIPCgdjYXJkX2lkGAEgASgNEgsKA3NlcRgCIAEoDSI5Cg91",
          "c2VfamllX2h1b190b2MSEwoEY2FyZBgBIAEoCzIFLmNhcmQSEQoJcGxheWVy",
          "X2lkGAIgASgNIjAKEHVzZV9kaWFvX2Jhb190b3MSDwoHY2FyZF9pZBgBIAEo",
          "DRILCgNzZXEYAiABKA0iVwoQdXNlX2RpYW9fYmFvX3RvYxIPCgdjYXJkX2lk",
          "GAEgASgNEh8KEG9sZF9tZXNzYWdlX2NhcmQYAiABKAsyBS5jYXJkEhEKCXBs",
          "YXllcl9pZBgDIAEoDSJICg51c2Vfd3VfZGFvX3RvcxIPCgdjYXJkX2lkGAEg",
          "ASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQYAiABKA0SCwoDc2VxGAMgASgNIlIK",
          "DnVzZV93dV9kYW9fdG9jEhMKBGNhcmQYASABKAsyBS5jYXJkEhEKCXBsYXll",
          "cl9pZBgCIAEoDRIYChB0YXJnZXRfcGxheWVyX2lkGAMgASgNIiQKFWVuZF9y",
          "ZWNlaXZlX3BoYXNlX3RvcxILCgNzZXEYASABKA1CFgoUY29tLmZlbmdzaGVu",
          "Zy5wcm90b3NiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::CommonReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::add_one_position_tos), global::add_one_position_tos.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::add_one_position_toc), global::add_one_position_toc.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::remove_one_position_tos), global::remove_one_position_tos.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::remove_one_position_toc), global::remove_one_position_toc.Parser, new[]{ "Position" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::display_record_tos), global::display_record_tos.Parser, new[]{ "Version", "RecordId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::display_record_end_toc), global::display_record_end_toc.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::save_record_success_toc), global::save_record_success_toc.Parser, new[]{ "RecordId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::join_room_tos), global::join_room_tos.Parser, new[]{ "Version", "Name", "Device" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::get_room_info_toc), global::get_room_info_toc.Parser, new[]{ "Names", "MyPosition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::add_robot_tos), global::add_robot_tos.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::remove_robot_tos), global::remove_robot_tos.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::join_room_toc), global::join_room_toc.Parser, new[]{ "Name", "Position" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::leave_room_toc), global::leave_room_toc.Parser, new[]{ "Position" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::wait_for_select_role_toc), global::wait_for_select_role_toc.Parser, new[]{ "PlayerCount", "Identity", "SecretTask", "Roles", "WaitingSecond" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::select_role_tos), global::select_role_tos.Parser, new[]{ "Role" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::init_toc), global::init_toc.Parser, new[]{ "PlayerCount", "Identity", "SecretTask", "Roles", "Names" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::notify_role_update_toc), global::notify_role_update_toc.Parser, new[]{ "PlayerId", "Role" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::add_card_toc), global::add_card_toc.Parser, new[]{ "PlayerId", "UnknownCardCount", "Cards" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_shi_tan_tos), global::use_shi_tan_tos.Parser, new[]{ "CardId", "PlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_shi_tan_toc), global::use_shi_tan_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "CardId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::show_shi_tan_toc), global::show_shi_tan_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::execute_shi_tan_tos), global::execute_shi_tan_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::execute_shi_tan_toc), global::execute_shi_tan_toc.Parser, new[]{ "PlayerId", "IsDrawCard" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sync_deck_num_toc), global::sync_deck_num_toc.Parser, new[]{ "Num", "Shuffled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::discard_card_toc), global::discard_card_toc.Parser, new[]{ "PlayerId", "Cards" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::notify_phase_toc), global::notify_phase_toc.Parser, new[]{ "CurrentPlayerId", "CurrentPhase", "MessagePlayerId", "MessageCardDir", "MessageCard", "WaitingPlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::end_main_phase_tos), global::end_main_phase_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_li_you_tos), global::use_li_you_tos.Parser, new[]{ "CardId", "PlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_li_you_toc), global::use_li_you_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "LiYouCard", "MessageCard", "JoinIntoHand" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_ping_heng_tos), global::use_ping_heng_tos.Parser, new[]{ "CardId", "PlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_ping_heng_toc), global::use_ping_heng_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "PingHengCard" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_wei_bi_tos), global::use_wei_bi_tos.Parser, new[]{ "CardId", "PlayerId", "WantType", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::wei_bi_wait_for_give_card_toc), global::wei_bi_wait_for_give_card_toc.Parser, new[]{ "Card", "PlayerId", "TargetPlayerId", "WantType", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::wei_bi_give_card_tos), global::wei_bi_give_card_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::wei_bi_give_card_toc), global::wei_bi_give_card_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::wei_bi_show_hand_card_toc), global::wei_bi_show_hand_card_toc.Parser, new[]{ "Card", "PlayerId", "WantType", "TargetPlayerId", "Cards" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_cheng_qing_tos), global::use_cheng_qing_tos.Parser, new[]{ "CardId", "PlayerId", "TargetCardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_cheng_qing_toc), global::use_cheng_qing_toc.Parser, new[]{ "Card", "PlayerId", "TargetPlayerId", "TargetCardId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::send_message_card_tos), global::send_message_card_tos.Parser, new[]{ "CardId", "TargetPlayerId", "LockPlayerId", "CardDir", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::send_message_card_toc), global::send_message_card_toc.Parser, new[]{ "CardId", "PlayerId", "TargetPlayerId", "LockPlayerIds", "CardDir" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::choose_whether_receive_tos), global::choose_whether_receive_tos.Parser, new[]{ "Receive", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::choose_receive_toc), global::choose_receive_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::end_fight_phase_tos), global::end_fight_phase_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::notify_dying_toc), global::notify_dying_toc.Parser, new[]{ "PlayerId", "LoseGame" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::notify_die_toc), global::notify_die_toc.Parser, new[]{ "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::notify_winner_toc), global::notify_winner_toc.Parser, new[]{ "DeclarePlayerIds", "WinnerIds", "Identity", "SecretTasks" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::wait_for_cheng_qing_toc), global::wait_for_cheng_qing_toc.Parser, new[]{ "DiePlayerId", "WaitingPlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cheng_qing_save_die_tos), global::cheng_qing_save_die_tos.Parser, new[]{ "Use", "CardId", "TargetCardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::wait_for_die_give_card_toc), global::wait_for_die_give_card_toc.Parser, new[]{ "PlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::die_give_card_tos), global::die_give_card_tos.Parser, new[]{ "TargetPlayerId", "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::notify_die_give_card_toc), global::notify_die_give_card_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card", "UnknownCardCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_po_yi_tos), global::use_po_yi_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_po_yi_toc), global::use_po_yi_toc.Parser, new[]{ "Card", "PlayerId", "MessageCard", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::po_yi_show_tos), global::po_yi_show_tos.Parser, new[]{ "Show", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::po_yi_show_toc), global::po_yi_show_toc.Parser, new[]{ "PlayerId", "Show", "MessageCard" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_jie_huo_tos), global::use_jie_huo_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_jie_huo_toc), global::use_jie_huo_toc.Parser, new[]{ "Card", "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_diao_bao_tos), global::use_diao_bao_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_diao_bao_toc), global::use_diao_bao_toc.Parser, new[]{ "CardId", "OldMessageCard", "PlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_wu_dao_tos), global::use_wu_dao_tos.Parser, new[]{ "CardId", "TargetPlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_wu_dao_toc), global::use_wu_dao_toc.Parser, new[]{ "Card", "PlayerId", "TargetPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::end_receive_phase_tos), global::end_receive_phase_tos.Parser, new[]{ "Seq" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// 请求房间加一个位置
/// </summary>
public sealed partial class add_one_position_tos : pb::IMessage<add_one_position_tos> {
  private static readonly pb::MessageParser<add_one_position_tos> _parser = new pb::MessageParser<add_one_position_tos>(() => new add_one_position_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<add_one_position_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_one_position_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_one_position_tos(add_one_position_tos other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_one_position_tos Clone() {
    return new add_one_position_tos(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as add_one_position_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(add_one_position_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(add_one_position_tos other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
/// 广播房间加一个位置
/// </summary>
public sealed partial class add_one_position_toc : pb::IMessage<add_one_position_toc> {
  private static readonly pb::MessageParser<add_one_position_toc> _parser = new pb::MessageParser<add_one_position_toc>(() => new add_one_position_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<add_one_position_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_one_position_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_one_position_toc(add_one_position_toc other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_one_position_toc Clone() {
    return new add_one_position_toc(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as add_one_position_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(add_one_position_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(add_one_position_toc other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
/// 请求房间减少一个位置
/// </summary>
public sealed partial class remove_one_position_tos : pb::IMessage<remove_one_position_tos> {
  private static readonly pb::MessageParser<remove_one_position_tos> _parser = new pb::MessageParser<remove_one_position_tos>(() => new remove_one_position_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<remove_one_position_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public remove_one_position_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public remove_one_position_tos(remove_one_position_tos other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public remove_one_position_tos Clone() {
    return new remove_one_position_tos(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as remove_one_position_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(remove_one_position_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(remove_one_position_tos other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
/// 广播房间减少一个位置
/// </summary>
public sealed partial class remove_one_position_toc : pb::IMessage<remove_one_position_toc> {
  private static readonly pb::MessageParser<remove_one_position_toc> _parser = new pb::MessageParser<remove_one_position_toc>(() => new remove_one_position_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<remove_one_position_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public remove_one_position_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public remove_one_position_toc(remove_one_position_toc other) : this() {
    position_ = other.position_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public remove_one_position_toc Clone() {
    return new remove_one_position_toc(this);
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 1;
  private uint position_;
  /// <summary>
  /// 减少的是哪个位置
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as remove_one_position_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(remove_one_position_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Position != other.Position) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Position != 0) hash ^= Position.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Position != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Position);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Position != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(remove_one_position_toc other) {
    if (other == null) {
      return;
    }
    if (other.Position != 0) {
      Position = other.Position;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Position = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求播放录像
/// </summary>
public sealed partial class display_record_tos : pb::IMessage<display_record_tos> {
  private static readonly pb::MessageParser<display_record_tos> _parser = new pb::MessageParser<display_record_tos>(() => new display_record_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<display_record_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public display_record_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public display_record_tos(display_record_tos other) : this() {
    version_ = other.version_;
    recordId_ = other.recordId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public display_record_tos Clone() {
    return new display_record_tos(this);
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 1;
  private uint version_;
  /// <summary>
  /// 客户端版本号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  /// <summary>Field number for the "record_id" field.</summary>
  public const int RecordIdFieldNumber = 2;
  private string recordId_ = "";
  /// <summary>
  /// 录像ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RecordId {
    get { return recordId_; }
    set {
      recordId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as display_record_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(display_record_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Version != other.Version) return false;
    if (RecordId != other.RecordId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Version != 0) hash ^= Version.GetHashCode();
    if (RecordId.Length != 0) hash ^= RecordId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Version != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Version);
    }
    if (RecordId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RecordId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Version != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
    }
    if (RecordId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RecordId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(display_record_tos other) {
    if (other == null) {
      return;
    }
    if (other.Version != 0) {
      Version = other.Version;
    }
    if (other.RecordId.Length != 0) {
      RecordId = other.RecordId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Version = input.ReadUInt32();
          break;
        }
        case 18: {
          RecordId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端录像播放完了
/// </summary>
public sealed partial class display_record_end_toc : pb::IMessage<display_record_end_toc> {
  private static readonly pb::MessageParser<display_record_end_toc> _parser = new pb::MessageParser<display_record_end_toc>(() => new display_record_end_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<display_record_end_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public display_record_end_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public display_record_end_toc(display_record_end_toc other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public display_record_end_toc Clone() {
    return new display_record_end_toc(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as display_record_end_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(display_record_end_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(display_record_end_toc other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
/// 通知客户端录像存好了
/// </summary>
public sealed partial class save_record_success_toc : pb::IMessage<save_record_success_toc> {
  private static readonly pb::MessageParser<save_record_success_toc> _parser = new pb::MessageParser<save_record_success_toc>(() => new save_record_success_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<save_record_success_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public save_record_success_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public save_record_success_toc(save_record_success_toc other) : this() {
    recordId_ = other.recordId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public save_record_success_toc Clone() {
    return new save_record_success_toc(this);
  }

  /// <summary>Field number for the "record_id" field.</summary>
  public const int RecordIdFieldNumber = 1;
  private string recordId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RecordId {
    get { return recordId_; }
    set {
      recordId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as save_record_success_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(save_record_success_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RecordId != other.RecordId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RecordId.Length != 0) hash ^= RecordId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RecordId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(RecordId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RecordId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RecordId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(save_record_success_toc other) {
    if (other == null) {
      return;
    }
    if (other.RecordId.Length != 0) {
      RecordId = other.RecordId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RecordId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 申请加入房间
/// </summary>
public sealed partial class join_room_tos : pb::IMessage<join_room_tos> {
  private static readonly pb::MessageParser<join_room_tos> _parser = new pb::MessageParser<join_room_tos>(() => new join_room_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<join_room_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public join_room_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public join_room_tos(join_room_tos other) : this() {
    version_ = other.version_;
    name_ = other.name_;
    device_ = other.device_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public join_room_tos Clone() {
    return new join_room_tos(this);
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 1;
  private uint version_;
  /// <summary>
  /// 客户端版本号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  /// 玩家的名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 3;
  private string device_ = "";
  /// <summary>
  /// 设备号，用于断线重连
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Device {
    get { return device_; }
    set {
      device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as join_room_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(join_room_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Version != other.Version) return false;
    if (Name != other.Name) return false;
    if (Device != other.Device) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Version != 0) hash ^= Version.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Device.Length != 0) hash ^= Device.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Version != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Version);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Device.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Device);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Version != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Device.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(join_room_tos other) {
    if (other == null) {
      return;
    }
    if (other.Version != 0) {
      Version = other.Version;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Device.Length != 0) {
      Device = other.Device;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Version = input.ReadUInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Device = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 返回房间所有人的信息
/// </summary>
public sealed partial class get_room_info_toc : pb::IMessage<get_room_info_toc> {
  private static readonly pb::MessageParser<get_room_info_toc> _parser = new pb::MessageParser<get_room_info_toc>(() => new get_room_info_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<get_room_info_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public get_room_info_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public get_room_info_toc(get_room_info_toc other) : this() {
    names_ = other.names_.Clone();
    myPosition_ = other.myPosition_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public get_room_info_toc Clone() {
    return new get_room_info_toc(this);
  }

  /// <summary>Field number for the "names" field.</summary>
  public const int NamesFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_names_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> names_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// 其它所有人的名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Names {
    get { return names_; }
  }

  /// <summary>Field number for the "my_position" field.</summary>
  public const int MyPositionFieldNumber = 2;
  private uint myPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MyPosition {
    get { return myPosition_; }
    set {
      myPosition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as get_room_info_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(get_room_info_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!names_.Equals(other.names_)) return false;
    if (MyPosition != other.MyPosition) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= names_.GetHashCode();
    if (MyPosition != 0) hash ^= MyPosition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    names_.WriteTo(output, _repeated_names_codec);
    if (MyPosition != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(MyPosition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += names_.CalculateSize(_repeated_names_codec);
    if (MyPosition != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyPosition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(get_room_info_toc other) {
    if (other == null) {
      return;
    }
    names_.Add(other.names_);
    if (other.MyPosition != 0) {
      MyPosition = other.MyPosition;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          names_.AddEntriesFrom(input, _repeated_names_codec);
          break;
        }
        case 16: {
          MyPosition = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求加一个机器人
/// </summary>
public sealed partial class add_robot_tos : pb::IMessage<add_robot_tos> {
  private static readonly pb::MessageParser<add_robot_tos> _parser = new pb::MessageParser<add_robot_tos>(() => new add_robot_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<add_robot_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_robot_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_robot_tos(add_robot_tos other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_robot_tos Clone() {
    return new add_robot_tos(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as add_robot_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(add_robot_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(add_robot_tos other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
/// 请求减少一个机器人
/// </summary>
public sealed partial class remove_robot_tos : pb::IMessage<remove_robot_tos> {
  private static readonly pb::MessageParser<remove_robot_tos> _parser = new pb::MessageParser<remove_robot_tos>(() => new remove_robot_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<remove_robot_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public remove_robot_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public remove_robot_tos(remove_robot_tos other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public remove_robot_tos Clone() {
    return new remove_robot_tos(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as remove_robot_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(remove_robot_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(remove_robot_tos other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
/// 通知谁加入了房间
/// </summary>
public sealed partial class join_room_toc : pb::IMessage<join_room_toc> {
  private static readonly pb::MessageParser<join_room_toc> _parser = new pb::MessageParser<join_room_toc>(() => new join_room_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<join_room_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public join_room_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public join_room_toc(join_room_toc other) : this() {
    name_ = other.name_;
    position_ = other.position_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public join_room_toc Clone() {
    return new join_room_toc(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 2;
  private uint position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as join_room_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(join_room_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Position != other.Position) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Position != 0) hash ^= Position.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Position != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Position);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Position != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(join_room_toc other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Position != 0) {
      Position = other.Position;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Position = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知谁离开的房间
/// </summary>
public sealed partial class leave_room_toc : pb::IMessage<leave_room_toc> {
  private static readonly pb::MessageParser<leave_room_toc> _parser = new pb::MessageParser<leave_room_toc>(() => new leave_room_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<leave_room_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public leave_room_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public leave_room_toc(leave_room_toc other) : this() {
    position_ = other.position_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public leave_room_toc Clone() {
    return new leave_room_toc(this);
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 1;
  private uint position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as leave_room_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(leave_room_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Position != other.Position) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Position != 0) hash ^= Position.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Position != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Position);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Position != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(leave_room_toc other) {
    if (other == null) {
      return;
    }
    if (other.Position != 0) {
      Position = other.Position;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Position = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 等待客户端选角色
/// </summary>
public sealed partial class wait_for_select_role_toc : pb::IMessage<wait_for_select_role_toc> {
  private static readonly pb::MessageParser<wait_for_select_role_toc> _parser = new pb::MessageParser<wait_for_select_role_toc>(() => new wait_for_select_role_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<wait_for_select_role_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wait_for_select_role_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wait_for_select_role_toc(wait_for_select_role_toc other) : this() {
    playerCount_ = other.playerCount_;
    identity_ = other.identity_;
    secretTask_ = other.secretTask_;
    roles_ = other.roles_.Clone();
    waitingSecond_ = other.waitingSecond_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wait_for_select_role_toc Clone() {
    return new wait_for_select_role_toc(this);
  }

  /// <summary>Field number for the "player_count" field.</summary>
  public const int PlayerCountFieldNumber = 1;
  private uint playerCount_;
  /// <summary>
  /// 玩家总人数（包括你）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerCount {
    get { return playerCount_; }
    set {
      playerCount_ = value;
    }
  }

  /// <summary>Field number for the "identity" field.</summary>
  public const int IdentityFieldNumber = 2;
  private global::color identity_ = global::color.Black;
  /// <summary>
  /// 你的身份
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::color Identity {
    get { return identity_; }
    set {
      identity_ = value;
    }
  }

  /// <summary>Field number for the "secret_task" field.</summary>
  public const int SecretTaskFieldNumber = 3;
  private global::secret_task secretTask_ = global::secret_task.Killer;
  /// <summary>
  /// （你的身份是神秘人时）你的机密任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::secret_task SecretTask {
    get { return secretTask_; }
    set {
      secretTask_ = value;
    }
  }

  /// <summary>Field number for the "roles" field.</summary>
  public const int RolesFieldNumber = 4;
  private static readonly pb::FieldCodec<global::role> _repeated_roles_codec
      = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::role) x);
  private readonly pbc::RepeatedField<global::role> roles_ = new pbc::RepeatedField<global::role>();
  /// <summary>
  /// 发给你的角色
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::role> Roles {
    get { return roles_; }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 5;
  private uint waitingSecond_;
  /// <summary>
  /// 读多少秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as wait_for_select_role_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(wait_for_select_role_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerCount != other.PlayerCount) return false;
    if (Identity != other.Identity) return false;
    if (SecretTask != other.SecretTask) return false;
    if(!roles_.Equals(other.roles_)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
    if (Identity != global::color.Black) hash ^= Identity.GetHashCode();
    if (SecretTask != global::secret_task.Killer) hash ^= SecretTask.GetHashCode();
    hash ^= roles_.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerCount != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerCount);
    }
    if (Identity != global::color.Black) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Identity);
    }
    if (SecretTask != global::secret_task.Killer) {
      output.WriteRawTag(24);
      output.WriteEnum((int) SecretTask);
    }
    roles_.WriteTo(output, _repeated_roles_codec);
    if (WaitingSecond != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(WaitingSecond);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerCount);
    }
    if (Identity != global::color.Black) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Identity);
    }
    if (SecretTask != global::secret_task.Killer) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecretTask);
    }
    size += roles_.CalculateSize(_repeated_roles_codec);
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(wait_for_select_role_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerCount != 0) {
      PlayerCount = other.PlayerCount;
    }
    if (other.Identity != global::color.Black) {
      Identity = other.Identity;
    }
    if (other.SecretTask != global::secret_task.Killer) {
      SecretTask = other.SecretTask;
    }
    roles_.Add(other.roles_);
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerCount = input.ReadUInt32();
          break;
        }
        case 16: {
          Identity = (global::color) input.ReadEnum();
          break;
        }
        case 24: {
          SecretTask = (global::secret_task) input.ReadEnum();
          break;
        }
        case 34:
        case 32: {
          roles_.AddEntriesFrom(input, _repeated_roles_codec);
          break;
        }
        case 40: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 选角色
/// </summary>
public sealed partial class select_role_tos : pb::IMessage<select_role_tos> {
  private static readonly pb::MessageParser<select_role_tos> _parser = new pb::MessageParser<select_role_tos>(() => new select_role_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<select_role_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public select_role_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public select_role_tos(select_role_tos other) : this() {
    role_ = other.role_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public select_role_tos Clone() {
    return new select_role_tos(this);
  }

  /// <summary>Field number for the "role" field.</summary>
  public const int RoleFieldNumber = 1;
  private global::role role_ = global::role.Unknown;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::role Role {
    get { return role_; }
    set {
      role_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as select_role_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(select_role_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Role != other.Role) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Role != global::role.Unknown) hash ^= Role.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Role != global::role.Unknown) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Role);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Role != global::role.Unknown) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(select_role_tos other) {
    if (other == null) {
      return;
    }
    if (other.Role != global::role.Unknown) {
      Role = other.Role;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Role = (global::role) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端：初始化游戏
/// </summary>
public sealed partial class init_toc : pb::IMessage<init_toc> {
  private static readonly pb::MessageParser<init_toc> _parser = new pb::MessageParser<init_toc>(() => new init_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<init_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public init_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public init_toc(init_toc other) : this() {
    playerCount_ = other.playerCount_;
    identity_ = other.identity_;
    secretTask_ = other.secretTask_;
    roles_ = other.roles_.Clone();
    names_ = other.names_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public init_toc Clone() {
    return new init_toc(this);
  }

  /// <summary>Field number for the "player_count" field.</summary>
  public const int PlayerCountFieldNumber = 1;
  private uint playerCount_;
  /// <summary>
  /// 玩家总人数（包括你）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerCount {
    get { return playerCount_; }
    set {
      playerCount_ = value;
    }
  }

  /// <summary>Field number for the "identity" field.</summary>
  public const int IdentityFieldNumber = 2;
  private global::color identity_ = global::color.Black;
  /// <summary>
  /// 你的身份
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::color Identity {
    get { return identity_; }
    set {
      identity_ = value;
    }
  }

  /// <summary>Field number for the "secret_task" field.</summary>
  public const int SecretTaskFieldNumber = 3;
  private global::secret_task secretTask_ = global::secret_task.Killer;
  /// <summary>
  /// （你的身份是神秘人时）你的机密任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::secret_task SecretTask {
    get { return secretTask_; }
    set {
      secretTask_ = value;
    }
  }

  /// <summary>Field number for the "roles" field.</summary>
  public const int RolesFieldNumber = 4;
  private static readonly pb::FieldCodec<global::role> _repeated_roles_codec
      = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::role) x);
  private readonly pbc::RepeatedField<global::role> roles_ = new pbc::RepeatedField<global::role>();
  /// <summary>
  /// 从自己开始，依次每个人的角色
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::role> Roles {
    get { return roles_; }
  }

  /// <summary>Field number for the "names" field.</summary>
  public const int NamesFieldNumber = 5;
  private static readonly pb::FieldCodec<string> _repeated_names_codec
      = pb::FieldCodec.ForString(42);
  private readonly pbc::RepeatedField<string> names_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// 从自己开始，依次每个人的名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Names {
    get { return names_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as init_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(init_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerCount != other.PlayerCount) return false;
    if (Identity != other.Identity) return false;
    if (SecretTask != other.SecretTask) return false;
    if(!roles_.Equals(other.roles_)) return false;
    if(!names_.Equals(other.names_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
    if (Identity != global::color.Black) hash ^= Identity.GetHashCode();
    if (SecretTask != global::secret_task.Killer) hash ^= SecretTask.GetHashCode();
    hash ^= roles_.GetHashCode();
    hash ^= names_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerCount != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerCount);
    }
    if (Identity != global::color.Black) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Identity);
    }
    if (SecretTask != global::secret_task.Killer) {
      output.WriteRawTag(24);
      output.WriteEnum((int) SecretTask);
    }
    roles_.WriteTo(output, _repeated_roles_codec);
    names_.WriteTo(output, _repeated_names_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerCount);
    }
    if (Identity != global::color.Black) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Identity);
    }
    if (SecretTask != global::secret_task.Killer) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecretTask);
    }
    size += roles_.CalculateSize(_repeated_roles_codec);
    size += names_.CalculateSize(_repeated_names_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(init_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerCount != 0) {
      PlayerCount = other.PlayerCount;
    }
    if (other.Identity != global::color.Black) {
      Identity = other.Identity;
    }
    if (other.SecretTask != global::secret_task.Killer) {
      SecretTask = other.SecretTask;
    }
    roles_.Add(other.roles_);
    names_.Add(other.names_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerCount = input.ReadUInt32();
          break;
        }
        case 16: {
          Identity = (global::color) input.ReadEnum();
          break;
        }
        case 24: {
          SecretTask = (global::secret_task) input.ReadEnum();
          break;
        }
        case 34:
        case 32: {
          roles_.AddEntriesFrom(input, _repeated_roles_codec);
          break;
        }
        case 42: {
          names_.AddEntriesFrom(input, _repeated_names_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端角色变化
/// </summary>
public sealed partial class notify_role_update_toc : pb::IMessage<notify_role_update_toc> {
  private static readonly pb::MessageParser<notify_role_update_toc> _parser = new pb::MessageParser<notify_role_update_toc>(() => new notify_role_update_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<notify_role_update_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_role_update_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_role_update_toc(notify_role_update_toc other) : this() {
    playerId_ = other.playerId_;
    role_ = other.role_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_role_update_toc Clone() {
    return new notify_role_update_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "role" field.</summary>
  public const int RoleFieldNumber = 2;
  private global::role role_ = global::role.Unknown;
  /// <summary>
  /// 值为unknown=0时表示盖上角色
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::role Role {
    get { return role_; }
    set {
      role_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as notify_role_update_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(notify_role_update_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Role != other.Role) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Role != global::role.Unknown) hash ^= Role.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (Role != global::role.Unknown) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Role);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Role != global::role.Unknown) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(notify_role_update_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Role != global::role.Unknown) {
      Role = other.Role;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Role = (global::role) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端：某个玩家摸了一张卡
/// </summary>
public sealed partial class add_card_toc : pb::IMessage<add_card_toc> {
  private static readonly pb::MessageParser<add_card_toc> _parser = new pb::MessageParser<add_card_toc>(() => new add_card_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<add_card_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_card_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_card_toc(add_card_toc other) : this() {
    playerId_ = other.playerId_;
    unknownCardCount_ = other.unknownCardCount_;
    cards_ = other.cards_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_card_toc Clone() {
    return new add_card_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 自己是0，右手方第一名玩家是1，以此类推
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "unknown_card_count" field.</summary>
  public const int UnknownCardCountFieldNumber = 2;
  private uint unknownCardCount_;
  /// <summary>
  /// 背面朝上的牌的数量（用于其它人摸牌，你看不到）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnknownCardCount {
    get { return unknownCardCount_; }
    set {
      unknownCardCount_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 摸到的卡牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as add_card_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(add_card_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (UnknownCardCount != other.UnknownCardCount) return false;
    if(!cards_.Equals(other.cards_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (UnknownCardCount != 0) hash ^= UnknownCardCount.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (UnknownCardCount != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(UnknownCardCount);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (UnknownCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnknownCardCount);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(add_card_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.UnknownCardCount != 0) {
      UnknownCardCount = other.UnknownCardCount;
    }
    cards_.Add(other.cards_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          UnknownCardCount = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求使用试探
/// </summary>
public sealed partial class use_shi_tan_tos : pb::IMessage<use_shi_tan_tos> {
  private static readonly pb::MessageParser<use_shi_tan_tos> _parser = new pb::MessageParser<use_shi_tan_tos>(() => new use_shi_tan_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_shi_tan_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_tos(use_shi_tan_tos other) : this() {
    cardId_ = other.cardId_;
    playerId_ = other.playerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_tos Clone() {
    return new use_shi_tan_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 卡牌ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_shi_tan_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_shi_tan_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (PlayerId != other.PlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_shi_tan_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端，谁对谁使用了试探
/// </summary>
public sealed partial class use_shi_tan_toc : pb::IMessage<use_shi_tan_toc> {
  private static readonly pb::MessageParser<use_shi_tan_toc> _parser = new pb::MessageParser<use_shi_tan_toc>(() => new use_shi_tan_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_shi_tan_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_toc(use_shi_tan_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_toc Clone() {
    return new use_shi_tan_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 被使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  /// <summary>
  /// 此时，只有使用者能看到这个id，其他人都是0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_shi_tan_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_shi_tan_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_shi_tan_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 向被试探者展示试探，并等待回应
/// </summary>
public sealed partial class show_shi_tan_toc : pb::IMessage<show_shi_tan_toc> {
  private static readonly pb::MessageParser<show_shi_tan_toc> _parser = new pb::MessageParser<show_shi_tan_toc>(() => new show_shi_tan_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<show_shi_tan_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public show_shi_tan_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public show_shi_tan_toc(show_shi_tan_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public show_shi_tan_toc Clone() {
    return new show_shi_tan_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 被使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  /// <summary>
  /// 只有自己是使用者或者被使用者时，这个字段才会有值，否则为null/nil
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 4;
  private uint waitingSecond_;
  /// <summary>
  /// 读多少秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 5;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as show_shi_tan_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(show_shi_tan_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(show_shi_tan_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 32: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 40: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 被试探者执行试探
/// </summary>
public sealed partial class execute_shi_tan_tos : pb::IMessage<execute_shi_tan_tos> {
  private static readonly pb::MessageParser<execute_shi_tan_tos> _parser = new pb::MessageParser<execute_shi_tan_tos>(() => new execute_shi_tan_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<execute_shi_tan_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_tos(execute_shi_tan_tos other) : this() {
    cardId_ = other.cardId_.Clone();
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_tos Clone() {
    return new execute_shi_tan_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_cardId_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> cardId_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// 摸牌或者弃牌但是没牌，就发送空数组。有牌弃就发送弃的牌的id。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> CardId {
    get { return cardId_; }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as execute_shi_tan_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(execute_shi_tan_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cardId_.Equals(other.cardId_)) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cardId_.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cardId_.WriteTo(output, _repeated_cardId_codec);
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cardId_.CalculateSize(_repeated_cardId_codec);
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(execute_shi_tan_tos other) {
    if (other == null) {
      return;
    }
    cardId_.Add(other.cardId_);
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          cardId_.AddEntriesFrom(input, _repeated_cardId_codec);
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class execute_shi_tan_toc : pb::IMessage<execute_shi_tan_toc> {
  private static readonly pb::MessageParser<execute_shi_tan_toc> _parser = new pb::MessageParser<execute_shi_tan_toc>(() => new execute_shi_tan_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<execute_shi_tan_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_toc(execute_shi_tan_toc other) : this() {
    playerId_ = other.playerId_;
    isDrawCard_ = other.isDrawCard_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_toc Clone() {
    return new execute_shi_tan_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 被试探者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "is_draw_card" field.</summary>
  public const int IsDrawCardFieldNumber = 2;
  private bool isDrawCard_;
  /// <summary>
  /// 若他选择了摸牌，则为true。（摸了牌和弃了牌是另外的协议）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsDrawCard {
    get { return isDrawCard_; }
    set {
      isDrawCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as execute_shi_tan_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(execute_shi_tan_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (IsDrawCard != other.IsDrawCard) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (IsDrawCard != false) hash ^= IsDrawCard.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (IsDrawCard != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsDrawCard);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (IsDrawCard != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(execute_shi_tan_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.IsDrawCard != false) {
      IsDrawCard = other.IsDrawCard;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          IsDrawCard = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端，牌堆的剩余数量
/// </summary>
public sealed partial class sync_deck_num_toc : pb::IMessage<sync_deck_num_toc> {
  private static readonly pb::MessageParser<sync_deck_num_toc> _parser = new pb::MessageParser<sync_deck_num_toc>(() => new sync_deck_num_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sync_deck_num_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sync_deck_num_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sync_deck_num_toc(sync_deck_num_toc other) : this() {
    num_ = other.num_;
    shuffled_ = other.shuffled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sync_deck_num_toc Clone() {
    return new sync_deck_num_toc(this);
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 1;
  private uint num_;
  /// <summary>
  /// 剩余数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  /// <summary>Field number for the "shuffled" field.</summary>
  public const int ShuffledFieldNumber = 2;
  private bool shuffled_;
  /// <summary>
  /// 是否发生了洗牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Shuffled {
    get { return shuffled_; }
    set {
      shuffled_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sync_deck_num_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sync_deck_num_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Num != other.Num) return false;
    if (Shuffled != other.Shuffled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Num != 0) hash ^= Num.GetHashCode();
    if (Shuffled != false) hash ^= Shuffled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Num != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Num);
    }
    if (Shuffled != false) {
      output.WriteRawTag(16);
      output.WriteBool(Shuffled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
    }
    if (Shuffled != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sync_deck_num_toc other) {
    if (other == null) {
      return;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
    if (other.Shuffled != false) {
      Shuffled = other.Shuffled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Num = input.ReadUInt32();
          break;
        }
        case 16: {
          Shuffled = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端，牌从谁的手牌被弃掉
/// </summary>
public sealed partial class discard_card_toc : pb::IMessage<discard_card_toc> {
  private static readonly pb::MessageParser<discard_card_toc> _parser = new pb::MessageParser<discard_card_toc>(() => new discard_card_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<discard_card_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public discard_card_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public discard_card_toc(discard_card_toc other) : this() {
    playerId_ = other.playerId_;
    cards_ = other.cards_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public discard_card_toc Clone() {
    return new discard_card_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(18, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as discard_card_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(discard_card_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(discard_card_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    cards_.Add(other.cards_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端，到谁的哪个阶段了
/// </summary>
public sealed partial class notify_phase_toc : pb::IMessage<notify_phase_toc> {
  private static readonly pb::MessageParser<notify_phase_toc> _parser = new pb::MessageParser<notify_phase_toc>(() => new notify_phase_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<notify_phase_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_phase_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_phase_toc(notify_phase_toc other) : this() {
    currentPlayerId_ = other.currentPlayerId_;
    currentPhase_ = other.currentPhase_;
    messagePlayerId_ = other.messagePlayerId_;
    messageCardDir_ = other.messageCardDir_;
    messageCard_ = other.messageCard_ != null ? other.messageCard_.Clone() : null;
    waitingPlayerId_ = other.waitingPlayerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_phase_toc Clone() {
    return new notify_phase_toc(this);
  }

  /// <summary>Field number for the "current_player_id" field.</summary>
  public const int CurrentPlayerIdFieldNumber = 1;
  private uint currentPlayerId_;
  /// <summary>
  /// 当前回合玩家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CurrentPlayerId {
    get { return currentPlayerId_; }
    set {
      currentPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "current_phase" field.</summary>
  public const int CurrentPhaseFieldNumber = 2;
  private global::phase currentPhase_ = global::phase.DrawPhase;
  /// <summary>
  /// 当前阶段
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::phase CurrentPhase {
    get { return currentPhase_; }
    set {
      currentPhase_ = value;
    }
  }

  /// <summary>Field number for the "message_player_id" field.</summary>
  public const int MessagePlayerIdFieldNumber = 3;
  private uint messagePlayerId_;
  /// <summary>
  /// 情报在谁面前（只有传递、争夺、接收阶段有效）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MessagePlayerId {
    get { return messagePlayerId_; }
    set {
      messagePlayerId_ = value;
    }
  }

  /// <summary>Field number for the "message_card_dir" field.</summary>
  public const int MessageCardDirFieldNumber = 4;
  private global::direction messageCardDir_ = global::direction.Up;
  /// <summary>
  /// 情报传递方向（只有传递、争夺、接收阶段有效）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::direction MessageCardDir {
    get { return messageCardDir_; }
    set {
      messageCardDir_ = value;
    }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 5;
  private global::card messageCard_;
  /// <summary>
  /// 在某些情况下，正在传递的情报应该正面向上，这时候就应该有这个字段
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  /// <summary>Field number for the "waiting_player_id" field.</summary>
  public const int WaitingPlayerIdFieldNumber = 6;
  private uint waitingPlayerId_;
  /// <summary>
  /// 读秒的玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingPlayerId {
    get { return waitingPlayerId_; }
    set {
      waitingPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 7;
  private uint waitingSecond_;
  /// <summary>
  /// 读多少秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 8;
  private uint seq_;
  /// <summary>
  /// 只有当自己需要读秒时，这个字段才有值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as notify_phase_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(notify_phase_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CurrentPlayerId != other.CurrentPlayerId) return false;
    if (CurrentPhase != other.CurrentPhase) return false;
    if (MessagePlayerId != other.MessagePlayerId) return false;
    if (MessageCardDir != other.MessageCardDir) return false;
    if (!object.Equals(MessageCard, other.MessageCard)) return false;
    if (WaitingPlayerId != other.WaitingPlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CurrentPlayerId != 0) hash ^= CurrentPlayerId.GetHashCode();
    if (CurrentPhase != global::phase.DrawPhase) hash ^= CurrentPhase.GetHashCode();
    if (MessagePlayerId != 0) hash ^= MessagePlayerId.GetHashCode();
    if (MessageCardDir != global::direction.Up) hash ^= MessageCardDir.GetHashCode();
    if (messageCard_ != null) hash ^= MessageCard.GetHashCode();
    if (WaitingPlayerId != 0) hash ^= WaitingPlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CurrentPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CurrentPlayerId);
    }
    if (CurrentPhase != global::phase.DrawPhase) {
      output.WriteRawTag(16);
      output.WriteEnum((int) CurrentPhase);
    }
    if (MessagePlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(MessagePlayerId);
    }
    if (MessageCardDir != global::direction.Up) {
      output.WriteRawTag(32);
      output.WriteEnum((int) MessageCardDir);
    }
    if (messageCard_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(MessageCard);
    }
    if (WaitingPlayerId != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(WaitingPlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CurrentPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentPlayerId);
    }
    if (CurrentPhase != global::phase.DrawPhase) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentPhase);
    }
    if (MessagePlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessagePlayerId);
    }
    if (MessageCardDir != global::direction.Up) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageCardDir);
    }
    if (messageCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageCard);
    }
    if (WaitingPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingPlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(notify_phase_toc other) {
    if (other == null) {
      return;
    }
    if (other.CurrentPlayerId != 0) {
      CurrentPlayerId = other.CurrentPlayerId;
    }
    if (other.CurrentPhase != global::phase.DrawPhase) {
      CurrentPhase = other.CurrentPhase;
    }
    if (other.MessagePlayerId != 0) {
      MessagePlayerId = other.MessagePlayerId;
    }
    if (other.MessageCardDir != global::direction.Up) {
      MessageCardDir = other.MessageCardDir;
    }
    if (other.messageCard_ != null) {
      if (messageCard_ == null) {
        MessageCard = new global::card();
      }
      MessageCard.MergeFrom(other.MessageCard);
    }
    if (other.WaitingPlayerId != 0) {
      WaitingPlayerId = other.WaitingPlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CurrentPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CurrentPhase = (global::phase) input.ReadEnum();
          break;
        }
        case 24: {
          MessagePlayerId = input.ReadUInt32();
          break;
        }
        case 32: {
          MessageCardDir = (global::direction) input.ReadEnum();
          break;
        }
        case 42: {
          if (messageCard_ == null) {
            MessageCard = new global::card();
          }
          input.ReadMessage(MessageCard);
          break;
        }
        case 48: {
          WaitingPlayerId = input.ReadUInt32();
          break;
        }
        case 56: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 64: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求结束出牌阶段，进入情报传递阶段
/// </summary>
public sealed partial class end_main_phase_tos : pb::IMessage<end_main_phase_tos> {
  private static readonly pb::MessageParser<end_main_phase_tos> _parser = new pb::MessageParser<end_main_phase_tos>(() => new end_main_phase_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<end_main_phase_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_main_phase_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_main_phase_tos(end_main_phase_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_main_phase_tos Clone() {
    return new end_main_phase_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as end_main_phase_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(end_main_phase_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(end_main_phase_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求使用利诱
/// </summary>
public sealed partial class use_li_you_tos : pb::IMessage<use_li_you_tos> {
  private static readonly pb::MessageParser<use_li_you_tos> _parser = new pb::MessageParser<use_li_you_tos>(() => new use_li_you_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_li_you_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_tos(use_li_you_tos other) : this() {
    cardId_ = other.cardId_;
    playerId_ = other.playerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_tos Clone() {
    return new use_li_you_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 卡牌ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_li_you_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_li_you_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (PlayerId != other.PlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_li_you_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端使用利诱的结果
/// </summary>
public sealed partial class use_li_you_toc : pb::IMessage<use_li_you_toc> {
  private static readonly pb::MessageParser<use_li_you_toc> _parser = new pb::MessageParser<use_li_you_toc>(() => new use_li_you_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_li_you_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_toc(use_li_you_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    liYouCard_ = other.liYouCard_ != null ? other.liYouCard_.Clone() : null;
    messageCard_ = other.messageCard_ != null ? other.messageCard_.Clone() : null;
    joinIntoHand_ = other.joinIntoHand_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_toc Clone() {
    return new use_li_you_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 被使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "li_you_card" field.</summary>
  public const int LiYouCardFieldNumber = 3;
  private global::card liYouCard_;
  /// <summary>
  /// 使用的这张利诱牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card LiYouCard {
    get { return liYouCard_; }
    set {
      liYouCard_ = value;
    }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 4;
  private global::card messageCard_;
  /// <summary>
  /// 利诱翻出来的牌。如果牌堆和弃牌堆全用完了，则为null/nil
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  /// <summary>Field number for the "join_into_hand" field.</summary>
  public const int JoinIntoHandFieldNumber = 5;
  private bool joinIntoHand_;
  /// <summary>
  /// 是否改为加入使用者手牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool JoinIntoHand {
    get { return joinIntoHand_; }
    set {
      joinIntoHand_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_li_you_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_li_you_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(LiYouCard, other.LiYouCard)) return false;
    if (!object.Equals(MessageCard, other.MessageCard)) return false;
    if (JoinIntoHand != other.JoinIntoHand) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (liYouCard_ != null) hash ^= LiYouCard.GetHashCode();
    if (messageCard_ != null) hash ^= MessageCard.GetHashCode();
    if (JoinIntoHand != false) hash ^= JoinIntoHand.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (liYouCard_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LiYouCard);
    }
    if (messageCard_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(MessageCard);
    }
    if (JoinIntoHand != false) {
      output.WriteRawTag(40);
      output.WriteBool(JoinIntoHand);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (liYouCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LiYouCard);
    }
    if (messageCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageCard);
    }
    if (JoinIntoHand != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_li_you_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.liYouCard_ != null) {
      if (liYouCard_ == null) {
        LiYouCard = new global::card();
      }
      LiYouCard.MergeFrom(other.LiYouCard);
    }
    if (other.messageCard_ != null) {
      if (messageCard_ == null) {
        MessageCard = new global::card();
      }
      MessageCard.MergeFrom(other.MessageCard);
    }
    if (other.JoinIntoHand != false) {
      JoinIntoHand = other.JoinIntoHand;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (liYouCard_ == null) {
            LiYouCard = new global::card();
          }
          input.ReadMessage(LiYouCard);
          break;
        }
        case 34: {
          if (messageCard_ == null) {
            MessageCard = new global::card();
          }
          input.ReadMessage(MessageCard);
          break;
        }
        case 40: {
          JoinIntoHand = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求使用平衡
/// </summary>
public sealed partial class use_ping_heng_tos : pb::IMessage<use_ping_heng_tos> {
  private static readonly pb::MessageParser<use_ping_heng_tos> _parser = new pb::MessageParser<use_ping_heng_tos>(() => new use_ping_heng_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_ping_heng_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_ping_heng_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_ping_heng_tos(use_ping_heng_tos other) : this() {
    cardId_ = other.cardId_;
    playerId_ = other.playerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_ping_heng_tos Clone() {
    return new use_ping_heng_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 卡牌ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_ping_heng_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_ping_heng_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (PlayerId != other.PlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_ping_heng_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端使用平衡的结果
/// </summary>
public sealed partial class use_ping_heng_toc : pb::IMessage<use_ping_heng_toc> {
  private static readonly pb::MessageParser<use_ping_heng_toc> _parser = new pb::MessageParser<use_ping_heng_toc>(() => new use_ping_heng_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_ping_heng_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_ping_heng_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_ping_heng_toc(use_ping_heng_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    pingHengCard_ = other.pingHengCard_ != null ? other.pingHengCard_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_ping_heng_toc Clone() {
    return new use_ping_heng_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 被使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "ping_heng_card" field.</summary>
  public const int PingHengCardFieldNumber = 3;
  private global::card pingHengCard_;
  /// <summary>
  /// 使用的这张平衡牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card PingHengCard {
    get { return pingHengCard_; }
    set {
      pingHengCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_ping_heng_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_ping_heng_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(PingHengCard, other.PingHengCard)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (pingHengCard_ != null) hash ^= PingHengCard.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (pingHengCard_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(PingHengCard);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (pingHengCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PingHengCard);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_ping_heng_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.pingHengCard_ != null) {
      if (pingHengCard_ == null) {
        PingHengCard = new global::card();
      }
      PingHengCard.MergeFrom(other.PingHengCard);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (pingHengCard_ == null) {
            PingHengCard = new global::card();
          }
          input.ReadMessage(PingHengCard);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求使用威逼
/// </summary>
public sealed partial class use_wei_bi_tos : pb::IMessage<use_wei_bi_tos> {
  private static readonly pb::MessageParser<use_wei_bi_tos> _parser = new pb::MessageParser<use_wei_bi_tos>(() => new use_wei_bi_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_wei_bi_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_wei_bi_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_wei_bi_tos(use_wei_bi_tos other) : this() {
    cardId_ = other.cardId_;
    playerId_ = other.playerId_;
    wantType_ = other.wantType_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_wei_bi_tos Clone() {
    return new use_wei_bi_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 卡牌ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "want_type" field.</summary>
  public const int WantTypeFieldNumber = 3;
  private global::card_type wantType_ = global::card_type.ChengQing;
  /// <summary>
  /// 声明的卡牌类型（截获/误导/调包/澄清）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card_type WantType {
    get { return wantType_; }
    set {
      wantType_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_wei_bi_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_wei_bi_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (PlayerId != other.PlayerId) return false;
    if (WantType != other.WantType) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WantType != global::card_type.ChengQing) hash ^= WantType.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (WantType != global::card_type.ChengQing) {
      output.WriteRawTag(24);
      output.WriteEnum((int) WantType);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WantType != global::card_type.ChengQing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WantType);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_wei_bi_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WantType != global::card_type.ChengQing) {
      WantType = other.WantType;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          WantType = (global::card_type) input.ReadEnum();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 威逼等待给牌
/// </summary>
public sealed partial class wei_bi_wait_for_give_card_toc : pb::IMessage<wei_bi_wait_for_give_card_toc> {
  private static readonly pb::MessageParser<wei_bi_wait_for_give_card_toc> _parser = new pb::MessageParser<wei_bi_wait_for_give_card_toc>(() => new wei_bi_wait_for_give_card_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<wei_bi_wait_for_give_card_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_wait_for_give_card_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_wait_for_give_card_toc(wei_bi_wait_for_give_card_toc other) : this() {
    card_ = other.card_ != null ? other.card_.Clone() : null;
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    wantType_ = other.wantType_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_wait_for_give_card_toc Clone() {
    return new wei_bi_wait_for_give_card_toc(this);
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 1;
  private global::card card_;
  /// <summary>
  /// 使用的那张威逼卡牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "want_type" field.</summary>
  public const int WantTypeFieldNumber = 4;
  private global::card_type wantType_ = global::card_type.ChengQing;
  /// <summary>
  /// 声明的卡牌类型（截获/误导/调包/澄清）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card_type WantType {
    get { return wantType_; }
    set {
      wantType_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 5;
  private uint waitingSecond_;
  /// <summary>
  /// 读多少秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 6;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as wei_bi_wait_for_give_card_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(wei_bi_wait_for_give_card_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Card, other.Card)) return false;
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (WantType != other.WantType) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (card_ != null) hash ^= Card.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (WantType != global::card_type.ChengQing) hash ^= WantType.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (card_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Card);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (WantType != global::card_type.ChengQing) {
      output.WriteRawTag(32);
      output.WriteEnum((int) WantType);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (WantType != global::card_type.ChengQing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WantType);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(wei_bi_wait_for_give_card_toc other) {
    if (other == null) {
      return;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.WantType != global::card_type.ChengQing) {
      WantType = other.WantType;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 32: {
          WantType = (global::card_type) input.ReadEnum();
          break;
        }
        case 40: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 48: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 威逼给牌
/// </summary>
public sealed partial class wei_bi_give_card_tos : pb::IMessage<wei_bi_give_card_tos> {
  private static readonly pb::MessageParser<wei_bi_give_card_tos> _parser = new pb::MessageParser<wei_bi_give_card_tos>(() => new wei_bi_give_card_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<wei_bi_give_card_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_give_card_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_give_card_tos(wei_bi_give_card_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_give_card_tos Clone() {
    return new wei_bi_give_card_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 给出去的卡牌ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as wei_bi_give_card_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(wei_bi_give_card_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(wei_bi_give_card_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知所有人威逼给牌
/// </summary>
public sealed partial class wei_bi_give_card_toc : pb::IMessage<wei_bi_give_card_toc> {
  private static readonly pb::MessageParser<wei_bi_give_card_toc> _parser = new pb::MessageParser<wei_bi_give_card_toc>(() => new wei_bi_give_card_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<wei_bi_give_card_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_give_card_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_give_card_toc(wei_bi_give_card_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_give_card_toc Clone() {
    return new wei_bi_give_card_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  /// <summary>
  /// 给出去的卡牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as wei_bi_give_card_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(wei_bi_give_card_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(wei_bi_give_card_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知所有人威逼的牌没有，展示所有手牌
/// </summary>
public sealed partial class wei_bi_show_hand_card_toc : pb::IMessage<wei_bi_show_hand_card_toc> {
  private static readonly pb::MessageParser<wei_bi_show_hand_card_toc> _parser = new pb::MessageParser<wei_bi_show_hand_card_toc>(() => new wei_bi_show_hand_card_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<wei_bi_show_hand_card_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_show_hand_card_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_show_hand_card_toc(wei_bi_show_hand_card_toc other) : this() {
    card_ = other.card_ != null ? other.card_.Clone() : null;
    playerId_ = other.playerId_;
    wantType_ = other.wantType_;
    targetPlayerId_ = other.targetPlayerId_;
    cards_ = other.cards_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wei_bi_show_hand_card_toc Clone() {
    return new wei_bi_show_hand_card_toc(this);
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 1;
  private global::card card_;
  /// <summary>
  /// 使用的那张威逼卡牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "want_type" field.</summary>
  public const int WantTypeFieldNumber = 3;
  private global::card_type wantType_ = global::card_type.ChengQing;
  /// <summary>
  /// 声明的卡牌类型（截获/误导/调包/澄清）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card_type WantType {
    get { return wantType_; }
    set {
      wantType_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 4;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(42, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 展示所有手牌，只有使用者能看到，其他人收到的都是空数组
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as wei_bi_show_hand_card_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(wei_bi_show_hand_card_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Card, other.Card)) return false;
    if (PlayerId != other.PlayerId) return false;
    if (WantType != other.WantType) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (card_ != null) hash ^= Card.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WantType != global::card_type.ChengQing) hash ^= WantType.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (card_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Card);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (WantType != global::card_type.ChengQing) {
      output.WriteRawTag(24);
      output.WriteEnum((int) WantType);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TargetPlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WantType != global::card_type.ChengQing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WantType);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(wei_bi_show_hand_card_toc other) {
    if (other == null) {
      return;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WantType != global::card_type.ChengQing) {
      WantType = other.WantType;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cards_.Add(other.cards_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          WantType = (global::card_type) input.ReadEnum();
          break;
        }
        case 32: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 42: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求使用澄清
/// </summary>
public sealed partial class use_cheng_qing_tos : pb::IMessage<use_cheng_qing_tos> {
  private static readonly pb::MessageParser<use_cheng_qing_tos> _parser = new pb::MessageParser<use_cheng_qing_tos>(() => new use_cheng_qing_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_cheng_qing_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_cheng_qing_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_cheng_qing_tos(use_cheng_qing_tos other) : this() {
    cardId_ = other.cardId_;
    playerId_ = other.playerId_;
    targetCardId_ = other.targetCardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_cheng_qing_tos Clone() {
    return new use_cheng_qing_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 卡牌ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_card_id" field.</summary>
  public const int TargetCardIdFieldNumber = 3;
  private uint targetCardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetCardId {
    get { return targetCardId_; }
    set {
      targetCardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_cheng_qing_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_cheng_qing_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (PlayerId != other.PlayerId) return false;
    if (TargetCardId != other.TargetCardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetCardId != 0) hash ^= TargetCardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (TargetCardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetCardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetCardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetCardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_cheng_qing_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetCardId != 0) {
      TargetCardId = other.TargetCardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetCardId = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知所有人澄清
/// </summary>
public sealed partial class use_cheng_qing_toc : pb::IMessage<use_cheng_qing_toc> {
  private static readonly pb::MessageParser<use_cheng_qing_toc> _parser = new pb::MessageParser<use_cheng_qing_toc>(() => new use_cheng_qing_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_cheng_qing_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_cheng_qing_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_cheng_qing_toc(use_cheng_qing_toc other) : this() {
    card_ = other.card_ != null ? other.card_.Clone() : null;
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    targetCardId_ = other.targetCardId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_cheng_qing_toc Clone() {
    return new use_cheng_qing_toc(this);
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 1;
  private global::card card_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "target_card_id" field.</summary>
  public const int TargetCardIdFieldNumber = 4;
  private uint targetCardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetCardId {
    get { return targetCardId_; }
    set {
      targetCardId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_cheng_qing_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_cheng_qing_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Card, other.Card)) return false;
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (TargetCardId != other.TargetCardId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (card_ != null) hash ^= Card.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (TargetCardId != 0) hash ^= TargetCardId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (card_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Card);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (TargetCardId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TargetCardId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (TargetCardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetCardId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_cheng_qing_toc other) {
    if (other == null) {
      return;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.TargetCardId != 0) {
      TargetCardId = other.TargetCardId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 32: {
          TargetCardId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求传情报
/// </summary>
public sealed partial class send_message_card_tos : pb::IMessage<send_message_card_tos> {
  private static readonly pb::MessageParser<send_message_card_tos> _parser = new pb::MessageParser<send_message_card_tos>(() => new send_message_card_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<send_message_card_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public send_message_card_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public send_message_card_tos(send_message_card_tos other) : this() {
    cardId_ = other.cardId_;
    targetPlayerId_ = other.targetPlayerId_;
    lockPlayerId_ = other.lockPlayerId_.Clone();
    cardDir_ = other.cardDir_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public send_message_card_tos Clone() {
    return new send_message_card_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "lock_player_id" field.</summary>
  public const int LockPlayerIdFieldNumber = 3;
  private static readonly pb::FieldCodec<uint> _repeated_lockPlayerId_codec
      = pb::FieldCodec.ForUInt32(26);
  private readonly pbc::RepeatedField<uint> lockPlayerId_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> LockPlayerId {
    get { return lockPlayerId_; }
  }

  /// <summary>Field number for the "card_dir" field.</summary>
  public const int CardDirFieldNumber = 4;
  private global::direction cardDir_ = global::direction.Up;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::direction CardDir {
    get { return cardDir_; }
    set {
      cardDir_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 5;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as send_message_card_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(send_message_card_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!lockPlayerId_.Equals(other.lockPlayerId_)) return false;
    if (CardDir != other.CardDir) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= lockPlayerId_.GetHashCode();
    if (CardDir != global::direction.Up) hash ^= CardDir.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    lockPlayerId_.WriteTo(output, _repeated_lockPlayerId_codec);
    if (CardDir != global::direction.Up) {
      output.WriteRawTag(32);
      output.WriteEnum((int) CardDir);
    }
    if (Seq != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += lockPlayerId_.CalculateSize(_repeated_lockPlayerId_codec);
    if (CardDir != global::direction.Up) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardDir);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(send_message_card_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    lockPlayerId_.Add(other.lockPlayerId_);
    if (other.CardDir != global::direction.Up) {
      CardDir = other.CardDir;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26:
        case 24: {
          lockPlayerId_.AddEntriesFrom(input, _repeated_lockPlayerId_codec);
          break;
        }
        case 32: {
          CardDir = (global::direction) input.ReadEnum();
          break;
        }
        case 40: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知所有人传情报
/// </summary>
public sealed partial class send_message_card_toc : pb::IMessage<send_message_card_toc> {
  private static readonly pb::MessageParser<send_message_card_toc> _parser = new pb::MessageParser<send_message_card_toc>(() => new send_message_card_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<send_message_card_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public send_message_card_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public send_message_card_toc(send_message_card_toc other) : this() {
    cardId_ = other.cardId_;
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    lockPlayerIds_ = other.lockPlayerIds_.Clone();
    cardDir_ = other.cardDir_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public send_message_card_toc Clone() {
    return new send_message_card_toc(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 只有传出者能看到这个字段
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  /// <summary>
  /// 传出者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  /// <summary>
  /// 目标
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "lock_player_ids" field.</summary>
  public const int LockPlayerIdsFieldNumber = 4;
  private static readonly pb::FieldCodec<uint> _repeated_lockPlayerIds_codec
      = pb::FieldCodec.ForUInt32(34);
  private readonly pbc::RepeatedField<uint> lockPlayerIds_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// 被锁定的玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> LockPlayerIds {
    get { return lockPlayerIds_; }
  }

  /// <summary>Field number for the "card_dir" field.</summary>
  public const int CardDirFieldNumber = 5;
  private global::direction cardDir_ = global::direction.Up;
  /// <summary>
  /// 传递的方向
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::direction CardDir {
    get { return cardDir_; }
    set {
      cardDir_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as send_message_card_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(send_message_card_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!lockPlayerIds_.Equals(other.lockPlayerIds_)) return false;
    if (CardDir != other.CardDir) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= lockPlayerIds_.GetHashCode();
    if (CardDir != global::direction.Up) hash ^= CardDir.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    lockPlayerIds_.WriteTo(output, _repeated_lockPlayerIds_codec);
    if (CardDir != global::direction.Up) {
      output.WriteRawTag(40);
      output.WriteEnum((int) CardDir);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += lockPlayerIds_.CalculateSize(_repeated_lockPlayerIds_codec);
    if (CardDir != global::direction.Up) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardDir);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(send_message_card_toc other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    lockPlayerIds_.Add(other.lockPlayerIds_);
    if (other.CardDir != global::direction.Up) {
      CardDir = other.CardDir;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 34:
        case 32: {
          lockPlayerIds_.AddEntriesFrom(input, _repeated_lockPlayerIds_codec);
          break;
        }
        case 40: {
          CardDir = (global::direction) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 选择是否接收情报
/// </summary>
public sealed partial class choose_whether_receive_tos : pb::IMessage<choose_whether_receive_tos> {
  private static readonly pb::MessageParser<choose_whether_receive_tos> _parser = new pb::MessageParser<choose_whether_receive_tos>(() => new choose_whether_receive_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<choose_whether_receive_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public choose_whether_receive_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public choose_whether_receive_tos(choose_whether_receive_tos other) : this() {
    receive_ = other.receive_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public choose_whether_receive_tos Clone() {
    return new choose_whether_receive_tos(this);
  }

  /// <summary>Field number for the "receive" field.</summary>
  public const int ReceiveFieldNumber = 1;
  private bool receive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Receive {
    get { return receive_; }
    set {
      receive_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as choose_whether_receive_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(choose_whether_receive_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Receive != other.Receive) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Receive != false) hash ^= Receive.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Receive != false) {
      output.WriteRawTag(8);
      output.WriteBool(Receive);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Receive != false) {
      size += 1 + 1;
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(choose_whether_receive_tos other) {
    if (other == null) {
      return;
    }
    if (other.Receive != false) {
      Receive = other.Receive;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Receive = input.ReadBool();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知所有人选择要接收情报（只有选择要收时有这条协议）
/// </summary>
public sealed partial class choose_receive_toc : pb::IMessage<choose_receive_toc> {
  private static readonly pb::MessageParser<choose_receive_toc> _parser = new pb::MessageParser<choose_receive_toc>(() => new choose_receive_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<choose_receive_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public choose_receive_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public choose_receive_toc(choose_receive_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public choose_receive_toc Clone() {
    return new choose_receive_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 接收者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as choose_receive_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(choose_receive_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(choose_receive_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 争夺阶段，轮到自己，选择什么都不出
/// </summary>
public sealed partial class end_fight_phase_tos : pb::IMessage<end_fight_phase_tos> {
  private static readonly pb::MessageParser<end_fight_phase_tos> _parser = new pb::MessageParser<end_fight_phase_tos>(() => new end_fight_phase_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<end_fight_phase_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_fight_phase_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_fight_phase_tos(end_fight_phase_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_fight_phase_tos Clone() {
    return new end_fight_phase_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as end_fight_phase_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(end_fight_phase_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(end_fight_phase_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端谁死亡了（通知客户端将其置灰，之后不能再成为目标了）
/// </summary>
public sealed partial class notify_dying_toc : pb::IMessage<notify_dying_toc> {
  private static readonly pb::MessageParser<notify_dying_toc> _parser = new pb::MessageParser<notify_dying_toc>(() => new notify_dying_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<notify_dying_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_dying_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_dying_toc(notify_dying_toc other) : this() {
    playerId_ = other.playerId_;
    loseGame_ = other.loseGame_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_dying_toc Clone() {
    return new notify_dying_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "lose_game" field.</summary>
  public const int LoseGameFieldNumber = 2;
  private bool loseGame_;
  /// <summary>
  /// true表示因为轮到传递情报时没情报传了导致输掉游戏
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool LoseGame {
    get { return loseGame_; }
    set {
      loseGame_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as notify_dying_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(notify_dying_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (LoseGame != other.LoseGame) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (LoseGame != false) hash ^= LoseGame.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (LoseGame != false) {
      output.WriteRawTag(16);
      output.WriteBool(LoseGame);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (LoseGame != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(notify_dying_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.LoseGame != false) {
      LoseGame = other.LoseGame;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          LoseGame = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端谁死亡了（通知客户端弃掉所有情报）
/// </summary>
public sealed partial class notify_die_toc : pb::IMessage<notify_die_toc> {
  private static readonly pb::MessageParser<notify_die_toc> _parser = new pb::MessageParser<notify_die_toc>(() => new notify_die_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<notify_die_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_die_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_die_toc(notify_die_toc other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_die_toc Clone() {
    return new notify_die_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as notify_die_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(notify_die_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(notify_die_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知谁获胜了
/// </summary>
public sealed partial class notify_winner_toc : pb::IMessage<notify_winner_toc> {
  private static readonly pb::MessageParser<notify_winner_toc> _parser = new pb::MessageParser<notify_winner_toc>(() => new notify_winner_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<notify_winner_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_winner_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_winner_toc(notify_winner_toc other) : this() {
    declarePlayerIds_ = other.declarePlayerIds_.Clone();
    winnerIds_ = other.winnerIds_.Clone();
    identity_ = other.identity_.Clone();
    secretTasks_ = other.secretTasks_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_winner_toc Clone() {
    return new notify_winner_toc(this);
  }

  /// <summary>Field number for the "declare_player_ids" field.</summary>
  public const int DeclarePlayerIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_declarePlayerIds_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> declarePlayerIds_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> DeclarePlayerIds {
    get { return declarePlayerIds_; }
  }

  /// <summary>Field number for the "winner_ids" field.</summary>
  public const int WinnerIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_winnerIds_codec
      = pb::FieldCodec.ForUInt32(18);
  private readonly pbc::RepeatedField<uint> winnerIds_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> WinnerIds {
    get { return winnerIds_; }
  }

  /// <summary>Field number for the "identity" field.</summary>
  public const int IdentityFieldNumber = 3;
  private static readonly pb::FieldCodec<global::color> _repeated_identity_codec
      = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::color) x);
  private readonly pbc::RepeatedField<global::color> identity_ = new pbc::RepeatedField<global::color>();
  /// <summary>
  /// 所有人的身份，自己的下标为0，右手第一个人的下标为1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::color> Identity {
    get { return identity_; }
  }

  /// <summary>Field number for the "secret_tasks" field.</summary>
  public const int SecretTasksFieldNumber = 4;
  private static readonly pb::FieldCodec<global::secret_task> _repeated_secretTasks_codec
      = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::secret_task) x);
  private readonly pbc::RepeatedField<global::secret_task> secretTasks_ = new pbc::RepeatedField<global::secret_task>();
  /// <summary>
  /// 神秘人任务，下标同上一一对应，不是神秘人的那个位置会空出来
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::secret_task> SecretTasks {
    get { return secretTasks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as notify_winner_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(notify_winner_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!declarePlayerIds_.Equals(other.declarePlayerIds_)) return false;
    if(!winnerIds_.Equals(other.winnerIds_)) return false;
    if(!identity_.Equals(other.identity_)) return false;
    if(!secretTasks_.Equals(other.secretTasks_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= declarePlayerIds_.GetHashCode();
    hash ^= winnerIds_.GetHashCode();
    hash ^= identity_.GetHashCode();
    hash ^= secretTasks_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    declarePlayerIds_.WriteTo(output, _repeated_declarePlayerIds_codec);
    winnerIds_.WriteTo(output, _repeated_winnerIds_codec);
    identity_.WriteTo(output, _repeated_identity_codec);
    secretTasks_.WriteTo(output, _repeated_secretTasks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += declarePlayerIds_.CalculateSize(_repeated_declarePlayerIds_codec);
    size += winnerIds_.CalculateSize(_repeated_winnerIds_codec);
    size += identity_.CalculateSize(_repeated_identity_codec);
    size += secretTasks_.CalculateSize(_repeated_secretTasks_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(notify_winner_toc other) {
    if (other == null) {
      return;
    }
    declarePlayerIds_.Add(other.declarePlayerIds_);
    winnerIds_.Add(other.winnerIds_);
    identity_.Add(other.identity_);
    secretTasks_.Add(other.secretTasks_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          declarePlayerIds_.AddEntriesFrom(input, _repeated_declarePlayerIds_codec);
          break;
        }
        case 18:
        case 16: {
          winnerIds_.AddEntriesFrom(input, _repeated_winnerIds_codec);
          break;
        }
        case 26:
        case 24: {
          identity_.AddEntriesFrom(input, _repeated_identity_codec);
          break;
        }
        case 34:
        case 32: {
          secretTasks_.AddEntriesFrom(input, _repeated_secretTasks_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 濒死求澄清
/// </summary>
public sealed partial class wait_for_cheng_qing_toc : pb::IMessage<wait_for_cheng_qing_toc> {
  private static readonly pb::MessageParser<wait_for_cheng_qing_toc> _parser = new pb::MessageParser<wait_for_cheng_qing_toc>(() => new wait_for_cheng_qing_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<wait_for_cheng_qing_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wait_for_cheng_qing_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wait_for_cheng_qing_toc(wait_for_cheng_qing_toc other) : this() {
    diePlayerId_ = other.diePlayerId_;
    waitingPlayerId_ = other.waitingPlayerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wait_for_cheng_qing_toc Clone() {
    return new wait_for_cheng_qing_toc(this);
  }

  /// <summary>Field number for the "die_player_id" field.</summary>
  public const int DiePlayerIdFieldNumber = 1;
  private uint diePlayerId_;
  /// <summary>
  /// 谁濒死
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DiePlayerId {
    get { return diePlayerId_; }
    set {
      diePlayerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_player_id" field.</summary>
  public const int WaitingPlayerIdFieldNumber = 2;
  private uint waitingPlayerId_;
  /// <summary>
  /// 读秒的玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingPlayerId {
    get { return waitingPlayerId_; }
    set {
      waitingPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 3;
  private uint waitingSecond_;
  /// <summary>
  /// 读多少秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as wait_for_cheng_qing_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(wait_for_cheng_qing_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DiePlayerId != other.DiePlayerId) return false;
    if (WaitingPlayerId != other.WaitingPlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DiePlayerId != 0) hash ^= DiePlayerId.GetHashCode();
    if (WaitingPlayerId != 0) hash ^= WaitingPlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DiePlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(DiePlayerId);
    }
    if (WaitingPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingPlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DiePlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiePlayerId);
    }
    if (WaitingPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingPlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(wait_for_cheng_qing_toc other) {
    if (other == null) {
      return;
    }
    if (other.DiePlayerId != 0) {
      DiePlayerId = other.DiePlayerId;
    }
    if (other.WaitingPlayerId != 0) {
      WaitingPlayerId = other.WaitingPlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DiePlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 是否使用澄清
/// </summary>
public sealed partial class cheng_qing_save_die_tos : pb::IMessage<cheng_qing_save_die_tos> {
  private static readonly pb::MessageParser<cheng_qing_save_die_tos> _parser = new pb::MessageParser<cheng_qing_save_die_tos>(() => new cheng_qing_save_die_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cheng_qing_save_die_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cheng_qing_save_die_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cheng_qing_save_die_tos(cheng_qing_save_die_tos other) : this() {
    use_ = other.use_;
    cardId_ = other.cardId_;
    targetCardId_ = other.targetCardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cheng_qing_save_die_tos Clone() {
    return new cheng_qing_save_die_tos(this);
  }

  /// <summary>Field number for the "use" field.</summary>
  public const int UseFieldNumber = 1;
  private bool use_;
  /// <summary>
  /// 是否使用澄清
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Use {
    get { return use_; }
    set {
      use_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private uint cardId_;
  /// <summary>
  /// 使用的澄清卡牌ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "target_card_id" field.</summary>
  public const int TargetCardIdFieldNumber = 3;
  private uint targetCardId_;
  /// <summary>
  /// 目标卡牌ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetCardId {
    get { return targetCardId_; }
    set {
      targetCardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 4;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cheng_qing_save_die_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cheng_qing_save_die_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Use != other.Use) return false;
    if (CardId != other.CardId) return false;
    if (TargetCardId != other.TargetCardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Use != false) hash ^= Use.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (TargetCardId != 0) hash ^= TargetCardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Use != false) {
      output.WriteRawTag(8);
      output.WriteBool(Use);
    }
    if (CardId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(CardId);
    }
    if (TargetCardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetCardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Use != false) {
      size += 1 + 1;
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (TargetCardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetCardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cheng_qing_save_die_tos other) {
    if (other == null) {
      return;
    }
    if (other.Use != false) {
      Use = other.Use;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.TargetCardId != 0) {
      TargetCardId = other.TargetCardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Use = input.ReadBool();
          break;
        }
        case 16: {
          CardId = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetCardId = input.ReadUInt32();
          break;
        }
        case 32: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 等待死亡时给三张牌
/// </summary>
public sealed partial class wait_for_die_give_card_toc : pb::IMessage<wait_for_die_give_card_toc> {
  private static readonly pb::MessageParser<wait_for_die_give_card_toc> _parser = new pb::MessageParser<wait_for_die_give_card_toc>(() => new wait_for_die_give_card_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<wait_for_die_give_card_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wait_for_die_give_card_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wait_for_die_give_card_toc(wait_for_die_give_card_toc other) : this() {
    playerId_ = other.playerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public wait_for_die_give_card_toc Clone() {
    return new wait_for_die_give_card_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 2;
  private uint waitingSecond_;
  /// <summary>
  /// 读多少秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as wait_for_die_give_card_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(wait_for_die_give_card_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(wait_for_die_give_card_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class die_give_card_tos : pb::IMessage<die_give_card_tos> {
  private static readonly pb::MessageParser<die_give_card_tos> _parser = new pb::MessageParser<die_give_card_tos>(() => new die_give_card_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<die_give_card_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public die_give_card_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public die_give_card_tos(die_give_card_tos other) : this() {
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_.Clone();
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public die_give_card_tos Clone() {
    return new die_give_card_tos(this);
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 1;
  private uint targetPlayerId_;
  /// <summary>
  /// 不给就填0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_cardId_codec
      = pb::FieldCodec.ForUInt32(18);
  private readonly pbc::RepeatedField<uint> cardId_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// 不给就填空数组
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> CardId {
    get { return cardId_; }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as die_give_card_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(die_give_card_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!cardId_.Equals(other.cardId_)) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= cardId_.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetPlayerId);
    }
    cardId_.WriteTo(output, _repeated_cardId_codec);
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += cardId_.CalculateSize(_repeated_cardId_codec);
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(die_give_card_tos other) {
    if (other == null) {
      return;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    cardId_.Add(other.cardId_);
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 18:
        case 16: {
          cardId_.AddEntriesFrom(input, _repeated_cardId_codec);
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class notify_die_give_card_toc : pb::IMessage<notify_die_give_card_toc> {
  private static readonly pb::MessageParser<notify_die_give_card_toc> _parser = new pb::MessageParser<notify_die_give_card_toc>(() => new notify_die_give_card_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<notify_die_give_card_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_die_give_card_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_die_give_card_toc(notify_die_give_card_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_.Clone();
    unknownCardCount_ = other.unknownCardCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_die_give_card_toc Clone() {
    return new notify_die_give_card_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 不给就填0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_card_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> card_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 不给就填空数组
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Card {
    get { return card_; }
  }

  /// <summary>Field number for the "unknown_card_count" field.</summary>
  public const int UnknownCardCountFieldNumber = 4;
  private uint unknownCardCount_;
  /// <summary>
  /// 其它人看不到牌就填这个
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnknownCardCount {
    get { return unknownCardCount_; }
    set {
      unknownCardCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as notify_die_give_card_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(notify_die_give_card_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if(!card_.Equals(other.card_)) return false;
    if (UnknownCardCount != other.UnknownCardCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    hash ^= card_.GetHashCode();
    if (UnknownCardCount != 0) hash ^= UnknownCardCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    card_.WriteTo(output, _repeated_card_codec);
    if (UnknownCardCount != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(UnknownCardCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    size += card_.CalculateSize(_repeated_card_codec);
    if (UnknownCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnknownCardCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(notify_die_give_card_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    card_.Add(other.card_);
    if (other.UnknownCardCount != 0) {
      UnknownCardCount = other.UnknownCardCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          card_.AddEntriesFrom(input, _repeated_card_codec);
          break;
        }
        case 32: {
          UnknownCardCount = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 使用破译
/// </summary>
public sealed partial class use_po_yi_tos : pb::IMessage<use_po_yi_tos> {
  private static readonly pb::MessageParser<use_po_yi_tos> _parser = new pb::MessageParser<use_po_yi_tos>(() => new use_po_yi_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_po_yi_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_po_yi_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_po_yi_tos(use_po_yi_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_po_yi_tos Clone() {
    return new use_po_yi_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 用的那张破译牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_po_yi_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_po_yi_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_po_yi_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知所有人使用破译，并询问是否翻开并摸一张牌（只有黑情报才能翻开）
/// </summary>
public sealed partial class use_po_yi_toc : pb::IMessage<use_po_yi_toc> {
  private static readonly pb::MessageParser<use_po_yi_toc> _parser = new pb::MessageParser<use_po_yi_toc>(() => new use_po_yi_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_po_yi_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_po_yi_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_po_yi_toc(use_po_yi_toc other) : this() {
    card_ = other.card_ != null ? other.card_.Clone() : null;
    playerId_ = other.playerId_;
    messageCard_ = other.messageCard_ != null ? other.messageCard_.Clone() : null;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_po_yi_toc Clone() {
    return new use_po_yi_toc(this);
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 1;
  private global::card card_;
  /// <summary>
  /// 用的那张破译牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 3;
  private global::card messageCard_;
  /// <summary>
  /// 只有使用者才能看到这张情报
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 4;
  private uint waitingSecond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 5;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_po_yi_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_po_yi_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Card, other.Card)) return false;
    if (PlayerId != other.PlayerId) return false;
    if (!object.Equals(MessageCard, other.MessageCard)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (card_ != null) hash ^= Card.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (messageCard_ != null) hash ^= MessageCard.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (card_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Card);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (messageCard_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MessageCard);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (messageCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageCard);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_po_yi_toc other) {
    if (other == null) {
      return;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.messageCard_ != null) {
      if (messageCard_ == null) {
        MessageCard = new global::card();
      }
      MessageCard.MergeFrom(other.MessageCard);
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (messageCard_ == null) {
            MessageCard = new global::card();
          }
          input.ReadMessage(MessageCard);
          break;
        }
        case 32: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 40: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class po_yi_show_tos : pb::IMessage<po_yi_show_tos> {
  private static readonly pb::MessageParser<po_yi_show_tos> _parser = new pb::MessageParser<po_yi_show_tos>(() => new po_yi_show_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<po_yi_show_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public po_yi_show_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public po_yi_show_tos(po_yi_show_tos other) : this() {
    show_ = other.show_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public po_yi_show_tos Clone() {
    return new po_yi_show_tos(this);
  }

  /// <summary>Field number for the "show" field.</summary>
  public const int ShowFieldNumber = 1;
  private bool show_;
  /// <summary>
  /// 是否翻开并摸一张牌（只有黑情报才能翻开）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Show {
    get { return show_; }
    set {
      show_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as po_yi_show_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(po_yi_show_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Show != other.Show) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Show != false) hash ^= Show.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Show != false) {
      output.WriteRawTag(8);
      output.WriteBool(Show);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Show != false) {
      size += 1 + 1;
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(po_yi_show_tos other) {
    if (other == null) {
      return;
    }
    if (other.Show != false) {
      Show = other.Show;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Show = input.ReadBool();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class po_yi_show_toc : pb::IMessage<po_yi_show_toc> {
  private static readonly pb::MessageParser<po_yi_show_toc> _parser = new pb::MessageParser<po_yi_show_toc>(() => new po_yi_show_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<po_yi_show_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public po_yi_show_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public po_yi_show_toc(po_yi_show_toc other) : this() {
    playerId_ = other.playerId_;
    show_ = other.show_;
    messageCard_ = other.messageCard_ != null ? other.messageCard_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public po_yi_show_toc Clone() {
    return new po_yi_show_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "show" field.</summary>
  public const int ShowFieldNumber = 2;
  private bool show_;
  /// <summary>
  /// 是否翻开并摸一张牌（只有黑情报才能翻开）（摸牌直接走摸牌协议）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Show {
    get { return show_; }
    set {
      show_ = value;
    }
  }

  /// <summary>Field number for the "message_card" field.</summary>
  public const int MessageCardFieldNumber = 3;
  private global::card messageCard_;
  /// <summary>
  /// 只有选择翻开时，才会显示这个情报
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card MessageCard {
    get { return messageCard_; }
    set {
      messageCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as po_yi_show_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(po_yi_show_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Show != other.Show) return false;
    if (!object.Equals(MessageCard, other.MessageCard)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Show != false) hash ^= Show.GetHashCode();
    if (messageCard_ != null) hash ^= MessageCard.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (Show != false) {
      output.WriteRawTag(16);
      output.WriteBool(Show);
    }
    if (messageCard_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MessageCard);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Show != false) {
      size += 1 + 1;
    }
    if (messageCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageCard);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(po_yi_show_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Show != false) {
      Show = other.Show;
    }
    if (other.messageCard_ != null) {
      if (messageCard_ == null) {
        MessageCard = new global::card();
      }
      MessageCard.MergeFrom(other.MessageCard);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          Show = input.ReadBool();
          break;
        }
        case 26: {
          if (messageCard_ == null) {
            MessageCard = new global::card();
          }
          input.ReadMessage(MessageCard);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 使用截获
/// </summary>
public sealed partial class use_jie_huo_tos : pb::IMessage<use_jie_huo_tos> {
  private static readonly pb::MessageParser<use_jie_huo_tos> _parser = new pb::MessageParser<use_jie_huo_tos>(() => new use_jie_huo_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_jie_huo_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_jie_huo_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_jie_huo_tos(use_jie_huo_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_jie_huo_tos Clone() {
    return new use_jie_huo_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 用的那张截获牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_jie_huo_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_jie_huo_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_jie_huo_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知所有人使用截获
/// </summary>
public sealed partial class use_jie_huo_toc : pb::IMessage<use_jie_huo_toc> {
  private static readonly pb::MessageParser<use_jie_huo_toc> _parser = new pb::MessageParser<use_jie_huo_toc>(() => new use_jie_huo_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_jie_huo_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_jie_huo_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_jie_huo_toc(use_jie_huo_toc other) : this() {
    card_ = other.card_ != null ? other.card_.Clone() : null;
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_jie_huo_toc Clone() {
    return new use_jie_huo_toc(this);
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 1;
  private global::card card_;
  /// <summary>
  /// 用的那张截获牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_jie_huo_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_jie_huo_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Card, other.Card)) return false;
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (card_ != null) hash ^= Card.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (card_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Card);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_jie_huo_toc other) {
    if (other == null) {
      return;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 使用调包
/// </summary>
public sealed partial class use_diao_bao_tos : pb::IMessage<use_diao_bao_tos> {
  private static readonly pb::MessageParser<use_diao_bao_tos> _parser = new pb::MessageParser<use_diao_bao_tos>(() => new use_diao_bao_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_diao_bao_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_diao_bao_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_diao_bao_tos(use_diao_bao_tos other) : this() {
    cardId_ = other.cardId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_diao_bao_tos Clone() {
    return new use_diao_bao_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 用的那张截获牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_diao_bao_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_diao_bao_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_diao_bao_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知所有人使用调包
/// </summary>
public sealed partial class use_diao_bao_toc : pb::IMessage<use_diao_bao_toc> {
  private static readonly pb::MessageParser<use_diao_bao_toc> _parser = new pb::MessageParser<use_diao_bao_toc>(() => new use_diao_bao_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_diao_bao_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_diao_bao_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_diao_bao_toc(use_diao_bao_toc other) : this() {
    cardId_ = other.cardId_;
    oldMessageCard_ = other.oldMessageCard_ != null ? other.oldMessageCard_.Clone() : null;
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_diao_bao_toc Clone() {
    return new use_diao_bao_toc(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 用的那张调包牌（但是调包后，这张调包会面朝下代替原情报继续传递），只有使用调包的人能收到这个值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "old_message_card" field.</summary>
  public const int OldMessageCardFieldNumber = 2;
  private global::card oldMessageCard_;
  /// <summary>
  /// 被弃掉的那张原来的情报
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card OldMessageCard {
    get { return oldMessageCard_; }
    set {
      oldMessageCard_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 3;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_diao_bao_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_diao_bao_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (!object.Equals(OldMessageCard, other.OldMessageCard)) return false;
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (oldMessageCard_ != null) hash ^= OldMessageCard.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (oldMessageCard_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(OldMessageCard);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (oldMessageCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OldMessageCard);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_diao_bao_toc other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.oldMessageCard_ != null) {
      if (oldMessageCard_ == null) {
        OldMessageCard = new global::card();
      }
      OldMessageCard.MergeFrom(other.OldMessageCard);
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 18: {
          if (oldMessageCard_ == null) {
            OldMessageCard = new global::card();
          }
          input.ReadMessage(OldMessageCard);
          break;
        }
        case 24: {
          PlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 使用误导
/// </summary>
public sealed partial class use_wu_dao_tos : pb::IMessage<use_wu_dao_tos> {
  private static readonly pb::MessageParser<use_wu_dao_tos> _parser = new pb::MessageParser<use_wu_dao_tos>(() => new use_wu_dao_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_wu_dao_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_wu_dao_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_wu_dao_tos(use_wu_dao_tos other) : this() {
    cardId_ = other.cardId_;
    targetPlayerId_ = other.targetPlayerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_wu_dao_tos Clone() {
    return new use_wu_dao_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 用的那张误导牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 误导的目标
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_wu_dao_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_wu_dao_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_wu_dao_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知所有人使用误导
/// </summary>
public sealed partial class use_wu_dao_toc : pb::IMessage<use_wu_dao_toc> {
  private static readonly pb::MessageParser<use_wu_dao_toc> _parser = new pb::MessageParser<use_wu_dao_toc>(() => new use_wu_dao_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_wu_dao_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_wu_dao_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_wu_dao_toc(use_wu_dao_toc other) : this() {
    card_ = other.card_ != null ? other.card_.Clone() : null;
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_wu_dao_toc Clone() {
    return new use_wu_dao_toc(this);
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 1;
  private global::card card_;
  /// <summary>
  /// 用的那张误导牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 3;
  private uint targetPlayerId_;
  /// <summary>
  /// 误导的目标
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_wu_dao_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_wu_dao_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Card, other.Card)) return false;
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (card_ != null) hash ^= Card.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (card_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Card);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TargetPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_wu_dao_toc other) {
    if (other == null) {
      return;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 接收阶段，轮到自己，选择什么都不做
/// </summary>
public sealed partial class end_receive_phase_tos : pb::IMessage<end_receive_phase_tos> {
  private static readonly pb::MessageParser<end_receive_phase_tos> _parser = new pb::MessageParser<end_receive_phase_tos>(() => new end_receive_phase_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<end_receive_phase_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_receive_phase_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_receive_phase_tos(end_receive_phase_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_receive_phase_tos Clone() {
    return new end_receive_phase_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as end_receive_phase_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(end_receive_phase_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(end_receive_phase_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
