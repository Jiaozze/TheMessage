// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fengsheng.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from fengsheng.proto</summary>
public static partial class FengshengReflection {

  #region Descriptor
  /// <summary>File descriptor for fengsheng.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FengshengReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9mZW5nc2hlbmcucHJvdG8ioQEKBGNhcmQSDwoHY2FyZF9pZBgBIAEoDRIa",
          "CgpjYXJkX2NvbG9yGAIgAygOMgYuY29sb3ISHAoIY2FyZF9kaXIYAyABKA4y",
          "Ci5kaXJlY3Rpb24SHQoJY2FyZF90eXBlGAQgASgOMgouY2FyZF90eXBlEh0K",
          "DXdob19kcmF3X2NhcmQYBSADKA4yBi5jb2xvchIQCghjYW5fbG9jaxgGIAEo",
          "CCJdCghpbml0X3RvYxIUCgxwbGF5ZXJfY291bnQYASABKA0SGAoIaWRlbnRp",
          "dHkYAiABKA4yBi5jb2xvchIhCgtzZWNyZXRfdGFzaxgDIAEoDjIMLnNlY3Jl",
          "dF90YXNrIlMKDGFkZF9jYXJkX3RvYxIRCglwbGF5ZXJfaWQYASABKA0SGgoS",
          "dW5rbm93bl9jYXJkX2NvdW50GAIgASgNEhQKBWNhcmRzGAMgAygLMgUuY2Fy",
          "ZCJCCg91c2Vfc2hpX3Rhbl90b3MSDwoHY2FyZF9pZBgBIAEoDRIRCglwbGF5",
          "ZXJfaWQYAiABKA0SCwoDc2VxGAMgASgNIk8KD3VzZV9zaGlfdGFuX3RvYxIR",
          "CglwbGF5ZXJfaWQYASABKA0SGAoQdGFyZ2V0X3BsYXllcl9pZBgCIAEoDRIP",
          "CgdjYXJkX2lkGAMgASgNInkKEHNob3dfc2hpX3Rhbl90b2MSEQoJcGxheWVy",
          "X2lkGAEgASgNEhgKEHRhcmdldF9wbGF5ZXJfaWQYAiABKA0SEwoEY2FyZBgD",
          "IAEoCzIFLmNhcmQSFgoOd2FpdGluZ19zZWNvbmQYBCABKA0SCwoDc2VxGAUg",
          "ASgNIjMKE2V4ZWN1dGVfc2hpX3Rhbl90b3MSDwoHY2FyZF9pZBgBIAMoDRIL",
          "CgNzZXEYAiABKA0iPgoTZXhlY3V0ZV9zaGlfdGFuX3RvYxIRCglwbGF5ZXJf",
          "aWQYASABKA0SFAoMaXNfZHJhd19jYXJkGAIgASgIIjIKEXN5bmNfZGVja19u",
          "dW1fdG9jEgsKA251bRgBIAEoDRIQCghzaHVmZmxlZBgCIAEoCCI7ChBkaXNj",
          "YXJkX2NhcmRfdG9jEhEKCXBsYXllcl9pZBgBIAEoDRIUCgVjYXJkcxgCIAMo",
          "CzIFLmNhcmQirAEKEG5vdGlmeV9waGFzZV90b2MSGQoRY3VycmVudF9wbGF5",
          "ZXJfaWQYASABKA0SHQoNY3VycmVudF9waGFzZRgCIAEoDjIGLnBoYXNlEh4K",
          "FmludGVsbGlnZW5jZV9wbGF5ZXJfaWQYAyABKA0SGQoRd2FpdGluZ19wbGF5",
          "ZXJfaWQYBCABKA0SFgoOd2FpdGluZ19zZWNvbmQYBSABKA0SCwoDc2VxGAYg",
          "ASgNIiEKEmVuZF9tYWluX3BoYXNlX3RvcxILCgNzZXEYASABKA0iQQoOdXNl",
          "X2xpX3lvdV90b3MSDwoHY2FyZF9pZBgBIAEoDRIRCglwbGF5ZXJfaWQYAiAB",
          "KA0SCwoDc2VxGAMgASgNImoKDnVzZV9saV95b3VfdG9jEhEKCXBsYXllcl9p",
          "ZBgBIAEoDRIYChB0YXJnZXRfcGxheWVyX2lkGAIgASgNEhMKBGNhcmQYAyAB",
          "KAsyBS5jYXJkEhYKDmpvaW5faW50b19oYW5kGAQgASgIKlsKBXBoYXNlEg4K",
          "CkRyYXdfUGhhc2UQABIOCgpNYWluX1BoYXNlEAESDgoKU2VuZF9QaGFzZRAC",
          "Eg8KC0ZpZ2h0X1BoYXNlEAMSEQoNUmVjZWl2ZV9QaGFzZRAEKoEBCgljYXJk",
          "X3R5cGUSDgoKQ2hlbmdfUWluZxAAEgsKB1NoaV9UYW4QARIKCgZXZWlfQmkQ",
          "AhIKCgZMaV9Zb3UQAxINCglQaW5nX0hlbmcQBBIJCgVQb19ZaRAFEgsKB0pp",
          "ZV9IdW8QBhIMCghEaWFvX0JhbxAHEgoKBld1X0RhbxAIKiUKBWNvbG9yEgkK",
          "BUJsYWNrEAASBwoDUmVkEAESCAoEQmx1ZRACKjUKC3NlY3JldF90YXNrEgoK",
          "BktpbGxlchAAEgsKB1N0ZWFsZXIQARINCglDb2xsZWN0b3IQAiooCglkaXJl",
          "Y3Rpb24SBgoCVXAQABIICgRMZWZ0EAESCQoFUmlnaHQQAkIQWg5wcm90b3Mv",
          "O3Byb3Rvc2IGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::phase), typeof(global::card_type), typeof(global::color), typeof(global::secret_task), typeof(global::direction), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::card), global::card.Parser, new[]{ "CardId", "CardColor", "CardDir", "CardType", "WhoDrawCard", "CanLock" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::init_toc), global::init_toc.Parser, new[]{ "PlayerCount", "Identity", "SecretTask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::add_card_toc), global::add_card_toc.Parser, new[]{ "PlayerId", "UnknownCardCount", "Cards" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_shi_tan_tos), global::use_shi_tan_tos.Parser, new[]{ "CardId", "PlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_shi_tan_toc), global::use_shi_tan_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "CardId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::show_shi_tan_toc), global::show_shi_tan_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::execute_shi_tan_tos), global::execute_shi_tan_tos.Parser, new[]{ "CardId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::execute_shi_tan_toc), global::execute_shi_tan_toc.Parser, new[]{ "PlayerId", "IsDrawCard" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sync_deck_num_toc), global::sync_deck_num_toc.Parser, new[]{ "Num", "Shuffled" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::discard_card_toc), global::discard_card_toc.Parser, new[]{ "PlayerId", "Cards" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::notify_phase_toc), global::notify_phase_toc.Parser, new[]{ "CurrentPlayerId", "CurrentPhase", "IntelligencePlayerId", "WaitingPlayerId", "WaitingSecond", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::end_main_phase_tos), global::end_main_phase_tos.Parser, new[]{ "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_li_you_tos), global::use_li_you_tos.Parser, new[]{ "CardId", "PlayerId", "Seq" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::use_li_you_toc), global::use_li_you_toc.Parser, new[]{ "PlayerId", "TargetPlayerId", "Card", "JoinIntoHand" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum phase {
  /// <summary>
  /// 摸牌阶段
  /// </summary>
  [pbr::OriginalName("Draw_Phase")] DrawPhase = 0,
  /// <summary>
  /// 出牌阶段
  /// </summary>
  [pbr::OriginalName("Main_Phase")] MainPhase = 1,
  /// <summary>
  /// 传递阶段
  /// </summary>
  [pbr::OriginalName("Send_Phase")] SendPhase = 2,
  /// <summary>
  /// 争夺阶段
  /// </summary>
  [pbr::OriginalName("Fight_Phase")] FightPhase = 3,
  /// <summary>
  /// 接收阶段
  /// </summary>
  [pbr::OriginalName("Receive_Phase")] ReceivePhase = 4,
}

public enum card_type {
  /// <summary>
  /// 澄清
  /// </summary>
  [pbr::OriginalName("Cheng_Qing")] ChengQing = 0,
  /// <summary>
  /// 试探
  /// </summary>
  [pbr::OriginalName("Shi_Tan")] ShiTan = 1,
  /// <summary>
  /// 威逼
  /// </summary>
  [pbr::OriginalName("Wei_Bi")] WeiBi = 2,
  /// <summary>
  /// 利诱
  /// </summary>
  [pbr::OriginalName("Li_You")] LiYou = 3,
  /// <summary>
  /// 平衡
  /// </summary>
  [pbr::OriginalName("Ping_Heng")] PingHeng = 4,
  /// <summary>
  /// 破译
  /// </summary>
  [pbr::OriginalName("Po_Yi")] PoYi = 5,
  /// <summary>
  /// 截获
  /// </summary>
  [pbr::OriginalName("Jie_Huo")] JieHuo = 6,
  /// <summary>
  /// 掉包
  /// </summary>
  [pbr::OriginalName("Diao_Bao")] DiaoBao = 7,
  /// <summary>
  /// 误导
  /// </summary>
  [pbr::OriginalName("Wu_Dao")] WuDao = 8,
}

public enum color {
  /// <summary>
  /// 对于身份，则是绿色（神秘人）；对于卡牌，则是黑色
  /// </summary>
  [pbr::OriginalName("Black")] Black = 0,
  /// <summary>
  /// 红色
  /// </summary>
  [pbr::OriginalName("Red")] Red = 1,
  /// <summary>
  /// 蓝色
  /// </summary>
  [pbr::OriginalName("Blue")] Blue = 2,
}

/// <summary>
/// 神秘人任务
/// </summary>
public enum secret_task {
  /// <summary>
  /// 你的回合中，一名红色和蓝色情报合计不少于2张的人死亡
  /// </summary>
  [pbr::OriginalName("Killer")] Killer = 0,
  /// <summary>
  /// 你的回合中，有人宣胜，则你代替他胜利
  /// </summary>
  [pbr::OriginalName("Stealer")] Stealer = 1,
  /// <summary>
  /// 你获得3张红色情报或者3张蓝色情报
  /// </summary>
  [pbr::OriginalName("Collector")] Collector = 2,
}

public enum direction {
  /// <summary>
  /// 向上
  /// </summary>
  [pbr::OriginalName("Up")] Up = 0,
  /// <summary>
  /// 向左
  /// </summary>
  [pbr::OriginalName("Left")] Left = 1,
  /// <summary>
  /// 向右
  /// </summary>
  [pbr::OriginalName("Right")] Right = 2,
}

#endregion

#region Messages
/// <summary>
/// 卡牌的结构体
/// </summary>
public sealed partial class card : pb::IMessage<card> {
  private static readonly pb::MessageParser<card> _parser = new pb::MessageParser<card>(() => new card());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<card> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public card() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public card(card other) : this() {
    cardId_ = other.cardId_;
    cardColor_ = other.cardColor_.Clone();
    cardDir_ = other.cardDir_;
    cardType_ = other.cardType_;
    whoDrawCard_ = other.whoDrawCard_.Clone();
    canLock_ = other.canLock_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public card Clone() {
    return new card(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 卡牌ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "card_color" field.</summary>
  public const int CardColorFieldNumber = 2;
  private static readonly pb::FieldCodec<global::color> _repeated_cardColor_codec
      = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::color) x);
  private readonly pbc::RepeatedField<global::color> cardColor_ = new pbc::RepeatedField<global::color>();
  /// <summary>
  /// 卡牌颜色（因为可能有双色卡，所以用了repeated）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::color> CardColor {
    get { return cardColor_; }
  }

  /// <summary>Field number for the "card_dir" field.</summary>
  public const int CardDirFieldNumber = 3;
  private global::direction cardDir_ = global::direction.Up;
  /// <summary>
  /// 卡牌上的箭头方向
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::direction CardDir {
    get { return cardDir_; }
    set {
      cardDir_ = value;
    }
  }

  /// <summary>Field number for the "card_type" field.</summary>
  public const int CardTypeFieldNumber = 4;
  private global::card_type cardType_ = global::card_type.ChengQing;
  /// <summary>
  /// 卡牌类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card_type CardType {
    get { return cardType_; }
    set {
      cardType_ = value;
    }
  }

  /// <summary>Field number for the "who_draw_card" field.</summary>
  public const int WhoDrawCardFieldNumber = 5;
  private static readonly pb::FieldCodec<global::color> _repeated_whoDrawCard_codec
      = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::color) x);
  private readonly pbc::RepeatedField<global::color> whoDrawCard_ = new pbc::RepeatedField<global::color>();
  /// <summary>
  /// （试探卡）哪个身份的人摸1张牌（那么另外的身份一定是弃1张牌）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::color> WhoDrawCard {
    get { return whoDrawCard_; }
  }

  /// <summary>Field number for the "can_lock" field.</summary>
  public const int CanLockFieldNumber = 6;
  private bool canLock_;
  /// <summary>
  /// 是否有锁定标记
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool CanLock {
    get { return canLock_; }
    set {
      canLock_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as card);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(card other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if(!cardColor_.Equals(other.cardColor_)) return false;
    if (CardDir != other.CardDir) return false;
    if (CardType != other.CardType) return false;
    if(!whoDrawCard_.Equals(other.whoDrawCard_)) return false;
    if (CanLock != other.CanLock) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    hash ^= cardColor_.GetHashCode();
    if (CardDir != global::direction.Up) hash ^= CardDir.GetHashCode();
    if (CardType != global::card_type.ChengQing) hash ^= CardType.GetHashCode();
    hash ^= whoDrawCard_.GetHashCode();
    if (CanLock != false) hash ^= CanLock.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    cardColor_.WriteTo(output, _repeated_cardColor_codec);
    if (CardDir != global::direction.Up) {
      output.WriteRawTag(24);
      output.WriteEnum((int) CardDir);
    }
    if (CardType != global::card_type.ChengQing) {
      output.WriteRawTag(32);
      output.WriteEnum((int) CardType);
    }
    whoDrawCard_.WriteTo(output, _repeated_whoDrawCard_codec);
    if (CanLock != false) {
      output.WriteRawTag(48);
      output.WriteBool(CanLock);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    size += cardColor_.CalculateSize(_repeated_cardColor_codec);
    if (CardDir != global::direction.Up) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardDir);
    }
    if (CardType != global::card_type.ChengQing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardType);
    }
    size += whoDrawCard_.CalculateSize(_repeated_whoDrawCard_codec);
    if (CanLock != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(card other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    cardColor_.Add(other.cardColor_);
    if (other.CardDir != global::direction.Up) {
      CardDir = other.CardDir;
    }
    if (other.CardType != global::card_type.ChengQing) {
      CardType = other.CardType;
    }
    whoDrawCard_.Add(other.whoDrawCard_);
    if (other.CanLock != false) {
      CanLock = other.CanLock;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 18:
        case 16: {
          cardColor_.AddEntriesFrom(input, _repeated_cardColor_codec);
          break;
        }
        case 24: {
          CardDir = (global::direction) input.ReadEnum();
          break;
        }
        case 32: {
          CardType = (global::card_type) input.ReadEnum();
          break;
        }
        case 42:
        case 40: {
          whoDrawCard_.AddEntriesFrom(input, _repeated_whoDrawCard_codec);
          break;
        }
        case 48: {
          CanLock = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端：初始化游戏
/// </summary>
public sealed partial class init_toc : pb::IMessage<init_toc> {
  private static readonly pb::MessageParser<init_toc> _parser = new pb::MessageParser<init_toc>(() => new init_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<init_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public init_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public init_toc(init_toc other) : this() {
    playerCount_ = other.playerCount_;
    identity_ = other.identity_;
    secretTask_ = other.secretTask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public init_toc Clone() {
    return new init_toc(this);
  }

  /// <summary>Field number for the "player_count" field.</summary>
  public const int PlayerCountFieldNumber = 1;
  private uint playerCount_;
  /// <summary>
  /// 玩家总人数（包括你）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerCount {
    get { return playerCount_; }
    set {
      playerCount_ = value;
    }
  }

  /// <summary>Field number for the "identity" field.</summary>
  public const int IdentityFieldNumber = 2;
  private global::color identity_ = global::color.Black;
  /// <summary>
  /// 你的身份
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::color Identity {
    get { return identity_; }
    set {
      identity_ = value;
    }
  }

  /// <summary>Field number for the "secret_task" field.</summary>
  public const int SecretTaskFieldNumber = 3;
  private global::secret_task secretTask_ = global::secret_task.Killer;
  /// <summary>
  /// （你的身份是神秘人时）你的机密任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::secret_task SecretTask {
    get { return secretTask_; }
    set {
      secretTask_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as init_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(init_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerCount != other.PlayerCount) return false;
    if (Identity != other.Identity) return false;
    if (SecretTask != other.SecretTask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
    if (Identity != global::color.Black) hash ^= Identity.GetHashCode();
    if (SecretTask != global::secret_task.Killer) hash ^= SecretTask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerCount != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerCount);
    }
    if (Identity != global::color.Black) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Identity);
    }
    if (SecretTask != global::secret_task.Killer) {
      output.WriteRawTag(24);
      output.WriteEnum((int) SecretTask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerCount);
    }
    if (Identity != global::color.Black) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Identity);
    }
    if (SecretTask != global::secret_task.Killer) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecretTask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(init_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerCount != 0) {
      PlayerCount = other.PlayerCount;
    }
    if (other.Identity != global::color.Black) {
      Identity = other.Identity;
    }
    if (other.SecretTask != global::secret_task.Killer) {
      SecretTask = other.SecretTask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerCount = input.ReadUInt32();
          break;
        }
        case 16: {
          Identity = (global::color) input.ReadEnum();
          break;
        }
        case 24: {
          SecretTask = (global::secret_task) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端：某个玩家摸了一张卡
/// </summary>
public sealed partial class add_card_toc : pb::IMessage<add_card_toc> {
  private static readonly pb::MessageParser<add_card_toc> _parser = new pb::MessageParser<add_card_toc>(() => new add_card_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<add_card_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_card_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_card_toc(add_card_toc other) : this() {
    playerId_ = other.playerId_;
    unknownCardCount_ = other.unknownCardCount_;
    cards_ = other.cards_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public add_card_toc Clone() {
    return new add_card_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 自己是0，右手方第一名玩家是1，以此类推
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "unknown_card_count" field.</summary>
  public const int UnknownCardCountFieldNumber = 2;
  private uint unknownCardCount_;
  /// <summary>
  /// 背面朝上的牌的数量（用于其它人摸牌，你看不到）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UnknownCardCount {
    get { return unknownCardCount_; }
    set {
      unknownCardCount_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(26, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  /// <summary>
  /// 摸到的卡牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as add_card_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(add_card_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (UnknownCardCount != other.UnknownCardCount) return false;
    if(!cards_.Equals(other.cards_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (UnknownCardCount != 0) hash ^= UnknownCardCount.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (UnknownCardCount != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(UnknownCardCount);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (UnknownCardCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnknownCardCount);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(add_card_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.UnknownCardCount != 0) {
      UnknownCardCount = other.UnknownCardCount;
    }
    cards_.Add(other.cards_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          UnknownCardCount = input.ReadUInt32();
          break;
        }
        case 26: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求使用试探
/// </summary>
public sealed partial class use_shi_tan_tos : pb::IMessage<use_shi_tan_tos> {
  private static readonly pb::MessageParser<use_shi_tan_tos> _parser = new pb::MessageParser<use_shi_tan_tos>(() => new use_shi_tan_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_shi_tan_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_tos(use_shi_tan_tos other) : this() {
    cardId_ = other.cardId_;
    playerId_ = other.playerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_tos Clone() {
    return new use_shi_tan_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 卡牌ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_shi_tan_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_shi_tan_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (PlayerId != other.PlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_shi_tan_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端，谁对谁使用了试探
/// </summary>
public sealed partial class use_shi_tan_toc : pb::IMessage<use_shi_tan_toc> {
  private static readonly pb::MessageParser<use_shi_tan_toc> _parser = new pb::MessageParser<use_shi_tan_toc>(() => new use_shi_tan_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_shi_tan_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_toc(use_shi_tan_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    cardId_ = other.cardId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_shi_tan_toc Clone() {
    return new use_shi_tan_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 被使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 3;
  private uint cardId_;
  /// <summary>
  /// 此时，只有使用者能看到这个id，其他人都是0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_shi_tan_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_shi_tan_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (CardId != other.CardId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (CardId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CardId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_shi_tan_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          CardId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 向被试探者展示试探，并等待回应
/// </summary>
public sealed partial class show_shi_tan_toc : pb::IMessage<show_shi_tan_toc> {
  private static readonly pb::MessageParser<show_shi_tan_toc> _parser = new pb::MessageParser<show_shi_tan_toc>(() => new show_shi_tan_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<show_shi_tan_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public show_shi_tan_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public show_shi_tan_toc(show_shi_tan_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public show_shi_tan_toc Clone() {
    return new show_shi_tan_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 被使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  /// <summary>
  /// 只有自己是使用者或者被使用者时，这个字段才会有值，否则为null/nil
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 4;
  private uint waitingSecond_;
  /// <summary>
  /// 读多少秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 5;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as show_shi_tan_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(show_shi_tan_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(show_shi_tan_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 32: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 40: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 被试探者执行试探
/// </summary>
public sealed partial class execute_shi_tan_tos : pb::IMessage<execute_shi_tan_tos> {
  private static readonly pb::MessageParser<execute_shi_tan_tos> _parser = new pb::MessageParser<execute_shi_tan_tos>(() => new execute_shi_tan_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<execute_shi_tan_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_tos(execute_shi_tan_tos other) : this() {
    cardId_ = other.cardId_.Clone();
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_tos Clone() {
    return new execute_shi_tan_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_cardId_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> cardId_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// 摸牌或者弃牌但是没牌，就发送空数组。有牌弃就发送弃的牌的id。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> CardId {
    get { return cardId_; }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 2;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as execute_shi_tan_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(execute_shi_tan_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!cardId_.Equals(other.cardId_)) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= cardId_.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cardId_.WriteTo(output, _repeated_cardId_codec);
    if (Seq != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cardId_.CalculateSize(_repeated_cardId_codec);
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(execute_shi_tan_tos other) {
    if (other == null) {
      return;
    }
    cardId_.Add(other.cardId_);
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          cardId_.AddEntriesFrom(input, _repeated_cardId_codec);
          break;
        }
        case 16: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class execute_shi_tan_toc : pb::IMessage<execute_shi_tan_toc> {
  private static readonly pb::MessageParser<execute_shi_tan_toc> _parser = new pb::MessageParser<execute_shi_tan_toc>(() => new execute_shi_tan_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<execute_shi_tan_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_toc(execute_shi_tan_toc other) : this() {
    playerId_ = other.playerId_;
    isDrawCard_ = other.isDrawCard_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public execute_shi_tan_toc Clone() {
    return new execute_shi_tan_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 被试探者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "is_draw_card" field.</summary>
  public const int IsDrawCardFieldNumber = 2;
  private bool isDrawCard_;
  /// <summary>
  /// 若他选择了摸牌，则为true。（摸了牌和弃了牌是另外的协议）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsDrawCard {
    get { return isDrawCard_; }
    set {
      isDrawCard_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as execute_shi_tan_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(execute_shi_tan_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (IsDrawCard != other.IsDrawCard) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (IsDrawCard != false) hash ^= IsDrawCard.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (IsDrawCard != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsDrawCard);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (IsDrawCard != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(execute_shi_tan_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.IsDrawCard != false) {
      IsDrawCard = other.IsDrawCard;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          IsDrawCard = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端，牌堆的剩余数量
/// </summary>
public sealed partial class sync_deck_num_toc : pb::IMessage<sync_deck_num_toc> {
  private static readonly pb::MessageParser<sync_deck_num_toc> _parser = new pb::MessageParser<sync_deck_num_toc>(() => new sync_deck_num_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sync_deck_num_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sync_deck_num_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sync_deck_num_toc(sync_deck_num_toc other) : this() {
    num_ = other.num_;
    shuffled_ = other.shuffled_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sync_deck_num_toc Clone() {
    return new sync_deck_num_toc(this);
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 1;
  private uint num_;
  /// <summary>
  /// 剩余数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  /// <summary>Field number for the "shuffled" field.</summary>
  public const int ShuffledFieldNumber = 2;
  private bool shuffled_;
  /// <summary>
  /// 是否发生了洗牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Shuffled {
    get { return shuffled_; }
    set {
      shuffled_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sync_deck_num_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sync_deck_num_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Num != other.Num) return false;
    if (Shuffled != other.Shuffled) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Num != 0) hash ^= Num.GetHashCode();
    if (Shuffled != false) hash ^= Shuffled.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Num != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Num);
    }
    if (Shuffled != false) {
      output.WriteRawTag(16);
      output.WriteBool(Shuffled);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
    }
    if (Shuffled != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sync_deck_num_toc other) {
    if (other == null) {
      return;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
    if (other.Shuffled != false) {
      Shuffled = other.Shuffled;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Num = input.ReadUInt32();
          break;
        }
        case 16: {
          Shuffled = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端，牌从谁的手牌被弃掉
/// </summary>
public sealed partial class discard_card_toc : pb::IMessage<discard_card_toc> {
  private static readonly pb::MessageParser<discard_card_toc> _parser = new pb::MessageParser<discard_card_toc>(() => new discard_card_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<discard_card_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public discard_card_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public discard_card_toc(discard_card_toc other) : this() {
    playerId_ = other.playerId_;
    cards_ = other.cards_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public discard_card_toc Clone() {
    return new discard_card_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "cards" field.</summary>
  public const int CardsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::card> _repeated_cards_codec
      = pb::FieldCodec.ForMessage(18, global::card.Parser);
  private readonly pbc::RepeatedField<global::card> cards_ = new pbc::RepeatedField<global::card>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::card> Cards {
    get { return cards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as discard_card_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(discard_card_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if(!cards_.Equals(other.cards_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    hash ^= cards_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    cards_.WriteTo(output, _repeated_cards_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    size += cards_.CalculateSize(_repeated_cards_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(discard_card_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    cards_.Add(other.cards_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 18: {
          cards_.AddEntriesFrom(input, _repeated_cards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端，到谁的哪个阶段了
/// </summary>
public sealed partial class notify_phase_toc : pb::IMessage<notify_phase_toc> {
  private static readonly pb::MessageParser<notify_phase_toc> _parser = new pb::MessageParser<notify_phase_toc>(() => new notify_phase_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<notify_phase_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_phase_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_phase_toc(notify_phase_toc other) : this() {
    currentPlayerId_ = other.currentPlayerId_;
    currentPhase_ = other.currentPhase_;
    intelligencePlayerId_ = other.intelligencePlayerId_;
    waitingPlayerId_ = other.waitingPlayerId_;
    waitingSecond_ = other.waitingSecond_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public notify_phase_toc Clone() {
    return new notify_phase_toc(this);
  }

  /// <summary>Field number for the "current_player_id" field.</summary>
  public const int CurrentPlayerIdFieldNumber = 1;
  private uint currentPlayerId_;
  /// <summary>
  /// 当前回合玩家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CurrentPlayerId {
    get { return currentPlayerId_; }
    set {
      currentPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "current_phase" field.</summary>
  public const int CurrentPhaseFieldNumber = 2;
  private global::phase currentPhase_ = global::phase.DrawPhase;
  /// <summary>
  /// 当前阶段
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::phase CurrentPhase {
    get { return currentPhase_; }
    set {
      currentPhase_ = value;
    }
  }

  /// <summary>Field number for the "intelligence_player_id" field.</summary>
  public const int IntelligencePlayerIdFieldNumber = 3;
  private uint intelligencePlayerId_;
  /// <summary>
  /// 情报在谁面前（只有传递、争夺、接收阶段有效）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint IntelligencePlayerId {
    get { return intelligencePlayerId_; }
    set {
      intelligencePlayerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_player_id" field.</summary>
  public const int WaitingPlayerIdFieldNumber = 4;
  private uint waitingPlayerId_;
  /// <summary>
  /// 读秒的玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingPlayerId {
    get { return waitingPlayerId_; }
    set {
      waitingPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "waiting_second" field.</summary>
  public const int WaitingSecondFieldNumber = 5;
  private uint waitingSecond_;
  /// <summary>
  /// 读多少秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint WaitingSecond {
    get { return waitingSecond_; }
    set {
      waitingSecond_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 6;
  private uint seq_;
  /// <summary>
  /// 只有当自己需要读秒时，这个字段才有值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as notify_phase_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(notify_phase_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CurrentPlayerId != other.CurrentPlayerId) return false;
    if (CurrentPhase != other.CurrentPhase) return false;
    if (IntelligencePlayerId != other.IntelligencePlayerId) return false;
    if (WaitingPlayerId != other.WaitingPlayerId) return false;
    if (WaitingSecond != other.WaitingSecond) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CurrentPlayerId != 0) hash ^= CurrentPlayerId.GetHashCode();
    if (CurrentPhase != global::phase.DrawPhase) hash ^= CurrentPhase.GetHashCode();
    if (IntelligencePlayerId != 0) hash ^= IntelligencePlayerId.GetHashCode();
    if (WaitingPlayerId != 0) hash ^= WaitingPlayerId.GetHashCode();
    if (WaitingSecond != 0) hash ^= WaitingSecond.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CurrentPlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CurrentPlayerId);
    }
    if (CurrentPhase != global::phase.DrawPhase) {
      output.WriteRawTag(16);
      output.WriteEnum((int) CurrentPhase);
    }
    if (IntelligencePlayerId != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(IntelligencePlayerId);
    }
    if (WaitingPlayerId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(WaitingPlayerId);
    }
    if (WaitingSecond != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(WaitingSecond);
    }
    if (Seq != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CurrentPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentPlayerId);
    }
    if (CurrentPhase != global::phase.DrawPhase) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentPhase);
    }
    if (IntelligencePlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntelligencePlayerId);
    }
    if (WaitingPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingPlayerId);
    }
    if (WaitingSecond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitingSecond);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(notify_phase_toc other) {
    if (other == null) {
      return;
    }
    if (other.CurrentPlayerId != 0) {
      CurrentPlayerId = other.CurrentPlayerId;
    }
    if (other.CurrentPhase != global::phase.DrawPhase) {
      CurrentPhase = other.CurrentPhase;
    }
    if (other.IntelligencePlayerId != 0) {
      IntelligencePlayerId = other.IntelligencePlayerId;
    }
    if (other.WaitingPlayerId != 0) {
      WaitingPlayerId = other.WaitingPlayerId;
    }
    if (other.WaitingSecond != 0) {
      WaitingSecond = other.WaitingSecond;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CurrentPlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          CurrentPhase = (global::phase) input.ReadEnum();
          break;
        }
        case 24: {
          IntelligencePlayerId = input.ReadUInt32();
          break;
        }
        case 32: {
          WaitingPlayerId = input.ReadUInt32();
          break;
        }
        case 40: {
          WaitingSecond = input.ReadUInt32();
          break;
        }
        case 48: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求结束出牌阶段，进入情报传递阶段
/// </summary>
public sealed partial class end_main_phase_tos : pb::IMessage<end_main_phase_tos> {
  private static readonly pb::MessageParser<end_main_phase_tos> _parser = new pb::MessageParser<end_main_phase_tos>(() => new end_main_phase_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<end_main_phase_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_main_phase_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_main_phase_tos(end_main_phase_tos other) : this() {
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public end_main_phase_tos Clone() {
    return new end_main_phase_tos(this);
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 1;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as end_main_phase_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(end_main_phase_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seq != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(end_main_phase_tos other) {
    if (other == null) {
      return;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求使用利诱
/// </summary>
public sealed partial class use_li_you_tos : pb::IMessage<use_li_you_tos> {
  private static readonly pb::MessageParser<use_li_you_tos> _parser = new pb::MessageParser<use_li_you_tos>(() => new use_li_you_tos());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_li_you_tos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_tos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_tos(use_li_you_tos other) : this() {
    cardId_ = other.cardId_;
    playerId_ = other.playerId_;
    seq_ = other.seq_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_tos Clone() {
    return new use_li_you_tos(this);
  }

  /// <summary>Field number for the "card_id" field.</summary>
  public const int CardIdFieldNumber = 1;
  private uint cardId_;
  /// <summary>
  /// 卡牌ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CardId {
    get { return cardId_; }
    set {
      cardId_ = value;
    }
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private uint playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private uint seq_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_li_you_tos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_li_you_tos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardId != other.CardId) return false;
    if (PlayerId != other.PlayerId) return false;
    if (Seq != other.Seq) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardId != 0) hash ^= CardId.GetHashCode();
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(CardId);
    }
    if (PlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PlayerId);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Seq);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
    }
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_li_you_tos other) {
    if (other == null) {
      return;
    }
    if (other.CardId != 0) {
      CardId = other.CardId;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardId = input.ReadUInt32();
          break;
        }
        case 16: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 24: {
          Seq = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 通知客户端使用利诱的结果
/// </summary>
public sealed partial class use_li_you_toc : pb::IMessage<use_li_you_toc> {
  private static readonly pb::MessageParser<use_li_you_toc> _parser = new pb::MessageParser<use_li_you_toc>(() => new use_li_you_toc());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<use_li_you_toc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FengshengReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_toc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_toc(use_li_you_toc other) : this() {
    playerId_ = other.playerId_;
    targetPlayerId_ = other.targetPlayerId_;
    card_ = other.card_ != null ? other.card_.Clone() : null;
    joinIntoHand_ = other.joinIntoHand_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public use_li_you_toc Clone() {
    return new use_li_you_toc(this);
  }

  /// <summary>Field number for the "player_id" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private uint playerId_;
  /// <summary>
  /// 使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "target_player_id" field.</summary>
  public const int TargetPlayerIdFieldNumber = 2;
  private uint targetPlayerId_;
  /// <summary>
  /// 被使用者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetPlayerId {
    get { return targetPlayerId_; }
    set {
      targetPlayerId_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::card card_;
  /// <summary>
  /// 利诱翻出来的牌。如果牌堆和弃牌堆全用完了，则为null/nil
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::card Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  /// <summary>Field number for the "join_into_hand" field.</summary>
  public const int JoinIntoHandFieldNumber = 4;
  private bool joinIntoHand_;
  /// <summary>
  /// 是否改为加入使用者手牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool JoinIntoHand {
    get { return joinIntoHand_; }
    set {
      joinIntoHand_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as use_li_you_toc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(use_li_you_toc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (TargetPlayerId != other.TargetPlayerId) return false;
    if (!object.Equals(Card, other.Card)) return false;
    if (JoinIntoHand != other.JoinIntoHand) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (TargetPlayerId != 0) hash ^= TargetPlayerId.GetHashCode();
    if (card_ != null) hash ^= Card.GetHashCode();
    if (JoinIntoHand != false) hash ^= JoinIntoHand.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PlayerId);
    }
    if (TargetPlayerId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TargetPlayerId);
    }
    if (card_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Card);
    }
    if (JoinIntoHand != false) {
      output.WriteRawTag(32);
      output.WriteBool(JoinIntoHand);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
    }
    if (TargetPlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetPlayerId);
    }
    if (card_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
    }
    if (JoinIntoHand != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(use_li_you_toc other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.TargetPlayerId != 0) {
      TargetPlayerId = other.TargetPlayerId;
    }
    if (other.card_ != null) {
      if (card_ == null) {
        Card = new global::card();
      }
      Card.MergeFrom(other.Card);
    }
    if (other.JoinIntoHand != false) {
      JoinIntoHand = other.JoinIntoHand;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadUInt32();
          break;
        }
        case 16: {
          TargetPlayerId = input.ReadUInt32();
          break;
        }
        case 26: {
          if (card_ == null) {
            Card = new global::card();
          }
          input.ReadMessage(Card);
          break;
        }
        case 32: {
          JoinIntoHand = input.ReadBool();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
